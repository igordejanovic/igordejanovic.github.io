#+title: Random bits and pieces
#+subtitle: ...about programming, languages, tools, FLOSS software...
#+author: Igor Dejanović
#+hugo_base_dir: .
#+hugo_section: /
#+options: creator:t author:nil

* Posts
:PROPERTIES:
:EXPORT_FILE_NAME: _index
:EXPORT_HUGO_SECTION: /
:EXPORT_HUGO_MENU: :menu main
:EXPORT_HUGO_TYPE: home
:END:
* Courses (in Serbian)
:PROPERTIES:
:EXPORT_HUGO_LINKTITLE: Courses/Предавања
:EXPORT_FILE_NAME: _index
:EXPORT_HUGO_SECTION: courses
:EXPORT_HUGO_MENU: :menu main
:END:

** Напомена
Слајдови су рађени у [[https://revealjs.com/][reveal.js]] оквиру. Следеће пречице су корисне:
- =Esc= - приказ 2д мапе, навигација могућа са стрелицама
- =Ctrl-Shift-F= - претрага по задатој речи
- =M= - садржај
- =?= - преглед пречица

Уколико желите да слајдове читате офлајн можете их конвертовати у PDF тако што
додате =?print-pdf= на крај URL-а и из веб прегледача /“одштампате”/ у фајл
(=Ctrl-P=).

* Predmeti
:PROPERTIES:
:EXPORT_HUGO_SECTION: courses
:EXPORT_HUGO_WEIGHT: auto
:END:
** ЈСД
:PROPERTIES:
:EXPORT_HUGO_SECTION_FRAG: jsd
:END:
*** Језици специфични за домен (/Domain-Specific Languages/)
:PROPERTIES:
:CUSTOM_ID: course-jsd
:EXPORT_FILE_NAME: index
:EXPORT_HUGO_LINKTITLE: JSD
:EXPORT_HUGO_TYPE: course
:EXPORT_HUGO_WEIGHT: 3001
:END:
#+begin_quote
Границе мог језика су границе мог света.

                    — /Ludwig Wittgenstein/
#+end_quote

1. [[file:00-upoznavanje/][О предмету]]
2. [[file:../tech/Python/][Програмски језик Пајтон]]
   - [[file:../tech/Python/zadaci.html][Задаци]]
3. [[file:01-uvod/][Увод у језике специфичне за домен]]
4. [[file:02-jezicke-sintakse-i-metamodelovanje/][Језичке синтаксе и метамоделовање]]
5. [[file:03-tekstualne-sintakse/][Текстуалне синтаксе]]
6. [[file:../tech/arpeggio/][Arpeggio]]
   - [[file:../tech/arpeggio/zadaci.html][Задаци]]
7. parglare
8. [[file:../tech/textX/][textX]]
   - [[file:../tech/textX/zadaci.html][Задаци]]
9. [[file:04-generisanje-programskog-koda/][Генерисање програмског кода]]
10. [[file:05-anatomija-dsla/][Анатомија једног ЈСД-а]]
11. [[file:projekat/][Информације за испитни пројекат]]
12. [[file:ispitna_pitanja/][Испитна питања]]

**** Литература
***** Основна
- Игор Дејановић, /Језици специфични за домен/, Факултет техничких
  наука, Нови Сад, 2021. (доступно у скриптарници ФТН-а)

***** Додатна
- M. Völter, [[http://dslbook.org/][/DSL Engineering: Designing, Implementing
  and Using Domain-Specific Languages/]]. 2013.
- S. Kelly and J.-P. Tolvanen, /Domain-Specific Modeling: Enabling Full Code
  Generation./ Wiley-IEEE Computer Society Pr, March 2008
- A. Kleppe, /Software language engineering: creating domain-specific languages
  using metamodels./ Addison-Wesley, 2009
- Federico Tomassetti, [[https://tomassetti.me/domain-specific-languages/][/The
  complete guide to (external) Domain Specific Languages/]], published on [[https://tomassetti.me/][the
  author's blog]], February 2017.
- Alessio Stalla,
  [[https://tomassetti.me/domain-specific-languages-in-python-with-textx/][Quick
  Domain-Specific Languages in Python with textX]]
- Beazley, David M. /Python essential reference/. Addison-Wesley Professional,
  2009. [@2009]

***** Пројекти претходних генерација (избор)
- [[https://github.com/E2Music/pyTabs][A Domain-Specific Language (DSL) for simplified music notation]]
- [[https://github.com/Tim6FTN/wash-lang-prototype][Web automation DSL]]
- [[https://github.com/IgorMaj/SyntaxColoring][EasyColorLang - Writing of TextMate grammars made easy]]
- [[https://github.com/simsimkic/dsl][Domain Specific Language for Source Code Formatting]]
- [[https://github.com/majak96/dsl-project][A domain-specific language for definining web-based surveys]]
- [[https://github.com/vtanja/JSD][DSL for generating Web applications]]
- [[https://github.com/vlaksi/JSZD-Proj][Sprint DSL for SCRUM]]
*** Информације за пројекат
:PROPERTIES:
:EXPORT_FILE_NAME: projekat
:END:
**** Teme
- Predloženi projekti moraju biti bazirani na textX ili parglare bibliotekama.
- Mogu biti JSD implementacije ili unapređenja pomenutih biblioteka.
- Jezici mogu da definišu i podršku za editore (code completion, syntax
  highlighting itd. za npr. VS Code) -- poželjno posebno kod većih timova.
  Videti projekte [[https://github.com/textX/textX-LS][textX-LS]] i [[https://microsoft.github.io/language-server-protocol/][Language Server Protocol]].

**** O vođenju projekta
- Svi projekti moraju biti otvorenog koda javno hostovani na GitHub-u. Izbor
  licence se ostavlja članovima tima, ali mora biti [[https://opensource.org/licenses][OSI odobrena]].
- Predlog se piše u README fajlu projekta i šalje se link predmetnom profesoru
  na odobrenje.
- Zadaci na projektu se definišu u sklopu [[https://github.com/features/issues/][GitHub issues]].
- Tekuće stanje se prati upotrebom [[https://docs.github.com/en/issues/organizing-your-work-with-project-boards/managing-project-boards/about-project-boards][Kanban table]].

**** Potrebno proveriti pre slanja profesoru na pregled
- Projekat može da se instalira u modu za razvoj sa =pip install -e=.
  - Da bi ovo bilo moguće projekat mora imati =setup.py= odnosno =setup.cfg= sa
    validnim meta-podacima.
  - Proverite da li =python setup.py bdist_wheel= pakuje sve potrebne fajlove u
    rezultujći wheel fajl.
  - Ukoliko se ispravno podesi projekat je moguće instalirati u virtuelno
    okruženje upotrebom pip komande direktno iz git repozitorijuma. Na primer:
    #+begin_src sh
    pip install git+https://github.com/textX/textX.git
    #+end_src
  - Za dodatne informacije pogledati [[https://packaging.python.org/en/latest/guides/distributing-packages-using-setuptools/][Python uputstvo za pakovanje i distribuciju
    projekata]].

- Svi textX jezici i generatori su registrovani na odgovarajući način u
  =setup.cfg= i dostupni =textx= komandi. Vidite [[http://textx.github.io/textX/stable/registration/][textX registraciju i otkrivanje]].
  Kao primer videti [[https://github.com/textX/textX/blob/master/setup.cfg][sam textX projekat]].

  Generatori se mogu pozvati sa:
  #+begin_src sh
  textx generate ...
  #+end_src

- README.md mora da sardži opis projekta, uputstvo za instalaciju i primer
  upotrebe. Jezik može biti srpski ili engleski ali mora biti konzistentno
  korišćen.
*** Испитна питања
:PROPERTIES:
:EXPORT_FILE_NAME: ispitna_pitanja
:END:
#+begin_quote
У изради.
#+end_quote

1. Дефиниши софтверски језик.
2. Дефиниши домен.
3. Шта је језик специфичан за домен?
4. Када језик можемо сматрати ЈСД?
5. У чему је разлика између језика специфичног за домен и језика опште намене?
6. Шта је главни разлог подизања продуктивности употребом ЈСД?
7. Опиши проблем менталног мапирања код развоја софтвера.
8. Како ЈСД утиче на квалитет софтвера?
9. Како ЈСД утиче на еволуцију и одржавање апликација?
10. Опиши главне архитектуре приликом израде ЈСД. Предности и мане.
11. Градивни елементи језика.
12. Шта је апстрактна синтакса језика? Наведи пример.
13. Шта је конкретна синтакса језика? Наведи пример.
14. Како можемо дефинисати семантику језика?
15. Класификација језика према врсти конкретне синтаксе.
16. Текстуалне синтаксе - предности и мане.
17. Графичке синтаксе - предности и мане.
18. Подела ЈСД према врсти домена. Наведи пример.
19. Подела ЈСД према начину имплементације (интерни/екстерни). Предности и мане. Наведи пример.
20. Мане/критике ЈСД.
21. Шта су језичке радионице?
22. Приступи у изради језичких радионица.
23. Шта су пројекциони едитори? У чему се разликују од радионица базираних на парсирању.
24. Шта је парсирање или синтаксна анализа?
25. Шта је стабло парсирања или стабло конкретне синтаксе?
26. Шта је стабло апстрактне синтаксе? По чему се разликује од стабла парсирања?
    Објасни на примеру.
27. Шта је секундарна нотација/синтакса?
28. Како дефинишемо модел?
29. Које су основне карактеристике модела?
30. Шта је мета-модел?
31. Шта је мета-метамодел? Које мета-метамоделе познајеш?
32. Шта је мета-језик?
33. Објасни стек за мета-моделовање. Паралела са класичним програмским језицима.
34. Шта представљају "мета" везе (/conformsTo/) између мета-нивоа? Каква је
    разлика између веза истанцирања унутар једног мета-нивоа и између
    мета-нивоа?
35. Које операције користимо при мета-моделовању?
36. Шта је апстракција? Између којих мета-нивоа стека за мета-моделовање се користи?
37. Шта је класификација? Каква је веза са мета-нивоима стека за
    мета-моделовање? Где се може користити?
38. Шта је генерализација?
39. Шта су токен модели а шта модели типова?
40. Шта је MOF?
41. Шта је ECore?
42. Објасни усклађеност елемената кроз мета-нивое на примеру.
43. Објасни како се спроводи анализа домена.
44. Шта је свеприсутни језик?

** УКС
:PROPERTIES:
:EXPORT_HUGO_SECTION_FRAG: uks
:END:
*** Управљање конфигурацијом софтвера (/Software-Configuration Management/)
:PROPERTIES:
:EXPORT_FILE_NAME: index
:EXPORT_HUGO_LINKTITLE: UKS
:EXPORT_HUGO_TYPE: course
:EXPORT_HUGO_WEIGHT: 3002
:END:
1. [[file:00-upoznavanje/][О предмету]]
2. [[file:../tech/Python/][Програмски језик Пајтон]]
3. [[file:01-osnove/][Основе управљања конфигурацијом софтвера]]
4. [[file:02-upravljanje-izvornim-kodom/][Управљање изворним кодом]]
5. [[file:../tech/sistemi-za-kontrolu-verzija/][Системи за контролу верзија - Увод]]
6. [[file:../tech/git/][Git]]
7. [[file:../tech/django/][Django]]
8. [[file:../tech/docker/][Docker]]
9. [[file:../tech/python-testing/][Тестирање Пајтон кода]]
*** Испитна питања
:PROPERTIES:
:EXPORT_FILE_NAME: projekat
:END:
**** Основе УКС
1. Дефиниши појам "Управљање конфигурацијом софтвера"?
2. Мотиви за увођење УКС.
3. Шта је ставка конфигурације? Како настаје? Опиши њен живтни циклус.
4. Шта је референтна верзија?
5. Којe су активности у традиционалном УК.
6. Архитектура система УК
7. Дефиниши идентификацију конфигурације? Које особине мора да има?
8. Чиме се бави активност управљања променама? Шта су захтеви за променама?
9. Шта је догађај код активности управљања променама?
10. Чиме се бави активност праћења статуса?
11. Чиме се бави активност ревизије и верификације?
12. Опиши активност управљања изворним кодом. Шта нам омогућава? Које алате познајеш?
13. Опиши активност управљања изградњом софтвера. Шта нам омогућава? Којe алате
    познајеш?
14. Опиши активност управљања конфигурацијом окружења.
15. Опиши активност управљања променама. Који су основни принципи?
16. Опиши актиност управљања издањима. Који су основни принципи?
17. Опиши актиност управљања увођењем. Који су основни принципи?
18. Које се активности обављају приликом увођења УКС у организацији?
19. Како се обавља процена текућих процеса УКС?
20. Шта је /Capability Maturity Model/? Који су његови нивои?
**** Управљање изворним кодом
**** /Git/
**** /Docker/
** Софтверски обрасци и компоненте (/Software Patterns and Components/)
:PROPERTIES:
:EXPORT_FILE_NAME: index
:EXPORT_HUGO_SECTION_FRAG: sok
:EXPORT_HUGO_LINKTITLE: SOK
:EXPORT_HUGO_TYPE: course
:EXPORT_HUGO_WEIGHT: 3003
:END:
1. [[file:00-upoznavanje/][О предмету]]
2. [[file:01-uvod/][Увод]]
3. [[file:02-kreacioni/][Фундаментални и креациони обрасци]]
   - [[file:primeri/creational.factorymethod.zip][/Factory Method/ пример]]
   - [[file:primeri/creational.prototype.zip][/Prototype/ пример]]
4. [[file:03-strukturalni/][Структурални обрасци]]
   - [[file:primeri/structural.composite.zip][/Composite/ пример]]
   - [[file:primeri/structural.proxy.zip][/Proxy/ пример]]
5. [[file:04-obrasci-ponasanja/][Обрасци понашања]]
6. [[file:../tech/dependency-injection/][Dependency Injection]]
7. [[file:razvoj-baziran-na-komponentama/][Развој базиран на компонентама]]
8. [[file:../tech/setuptools/][Компонентни развој у Пајтону]]
9. [[file:projektni-zadatak/][Пројектни задатак]]
10. [[file:../tech/django/][Django]]
11. [[file:../tech/d3/][D3]]
12. [[file:../tech/git/][Git]]
13. [[file:05-mikroservisni-obrasci/][Микросервисни обрасци]]
** Напредне технике програмирања (СИИТ) (/Advanced Programming Tehniques/)
:PROPERTIES:
:EXPORT_FILE_NAME: index
:EXPORT_HUGO_SECTION_FRAG: ntp-siit
:EXPORT_HUGO_LINKTITLE: NTP-SIIT
:EXPORT_HUGO_TYPE: course
:EXPORT_HUGO_WEIGHT: 3004
:END:
1. [[file:00-upoznavanje/][О предмету]]
2. [[file:napredni-python/][Напредни Пајтон]]
3. [[file:jsd-uvod/][Увод у језике специфичне за домен]]
4. [[file:../tech/textX/][textX]]
5. [[file:../tech/Pharo/][Pharo/Smalltalk]]
6. [[file:../tech/GoLang/][Програмски језик Гоу]]
7. [[file:../tech/Rust/][Програмски језик Раст]]
** Напредне технике програмирања (СИТ) (/Advanced Programming Tehniques/)
:PROPERTIES:
:EXPORT_FILE_NAME: index
:EXPORT_HUGO_SECTION_FRAG: ntp-sit
:EXPORT_HUGO_LINKTITLE: NTP-SIT
:EXPORT_HUGO_TYPE: course
:EXPORT_HUGO_WEIGHT: 3005
:END:
1. [[file:../ntp-siit/00-upoznavanje/][О предмету]]
2. [[file:../ntp-siit/napredni-python/][Напредни Пајтон]]
3. [[file:../ntp-siit/jsd-uvod/][Увод у језике специфичне за домен]]
4. [[file:../tech/textX/][textX]]
5. [[file:../tech/Pharo/][Pharo/Smalltalk]]
6. [[file:../tech/GoLang/][Програмски језик Гоу]]
7. [[file:../tech/Rust/][Програмски језик Раст]]
** Технологије
:PROPERTIES:
:EXPORT_FILE_NAME: index
:EXPORT_HUGO_SECTION_FRAG: tech
:EXPORT_HUGO_LINKTITLE: Tech
:EXPORT_HUGO_TYPE: course
:EXPORT_HUGO_WEIGHT: 3005
:END:
- [[file:textX][textX]]
- [[file:arpeggio][Arpeggio]]
- [[file:parglare][parglare]]
- [[file:Python][Programski jezik Python]]
- [[file:python-testing][Testiranje Python koda]]
- [[file:Pharo][Pharo/Smalltalk]]
- [[file:GoLang][Go]]
- [[file:Rust][Rust]]
- [[file:django][Django]]
- [[file:docker][Docker]]
- [[file:d3][D3]]
* Mentoring (in Serbian)
:PROPERTIES:
:EXPORT_HUGO_LINKTITLE: Mentoring
:EXPORT_FILE_NAME: _index
:EXPORT_HUGO_SECTION: mentoring
:EXPORT_HUGO_TYPE: page
:EXPORT_HUGO_MENU: :menu main
:END:
Овде можете пронаћи информације за завршне дипломске и мастер радове као и за
теме за докторате.

* Open-source
:PROPERTIES:
:CUSTOM_ID: projects
:EXPORT_FILE_NAME: projects
:EXPORT_HUGO_SECTION: /
:EXPORT_HUGO_MENU: :menu main
:END:

Here are short descriptions of some of [[https://en.wikipedia.org/wiki/Free_and_open-source_software][FOSS]] projects I started a while ago. I
use these tools in my work, research and teaching Domain-Specific Languages
course.

** [[https://textx.github.io/textX/][textX]]
:PROPERTIES:
:CUSTOM_ID: textx
:END:
textX is a meta-language (i.e. a language for language definition) for
domain-specific language (DSL) specification in Python inspired by
[[https://eclipse.org/Xtext/][Xtext]].

From a single grammar description textX automatically builds a meta-model (in
the form of Python classes) and a parser for your language. Parser will parse
expressions on your language and automatically build a graph of Python objects
(i.e. the model) corresponding to the meta-model.

Read more information [[https://textx.github.io/textX/][here]] or see the project on [[https://github.com/textX/textX][GitHub]].

** [[https://www.igordejanovic.net/parglare/][parglare]]
Parglare is a modern approach to old-school parsing algorithms - LR and GLR. It
uses integrated scanner (a.k.a scannerless parsing), have an extensive support
for debugging, tracing and visualization. For grammar specification a BNF-like
notation is used.

Read more information [[https://www.igordejanovic.net/parglare/][here]] or see the project on [[https://github.com/igordejanovic/parglare/][GitHub]].

** [[https://textx.github.io/Arpeggio/][Arpeggio]]
:PROPERTIES:
:CUSTOM_ID: arpeggio
:END:
Arpeggio is recursive descent parser with backtracking and memoization (a.k.a.
pacrat parser) for Python. Arpeggio grammars are based on the PEG formalism.
Arpeggio's main use is a foundation for a tool-chain for DSL development but it
can be used for all sort of general purpose parsing.

It is used as a parsing tehnology for textX.

Read more information [[https://textx.github.io/Arpeggio/][here]] or see the project on [[https://github.com/textX/Arpeggio/][GitHub]].

* Recipes
:PROPERTIES:
:EXPORT_HUGO_SECTION: recipes
:EXPORT_HUGO_MENU: :menu main
:EXPORT_FILE_NAME: _index
:END:
These posts are recipes, WIP notes, thoughts and tips about things I'm working
on. This kind of semi-baked content is usually called /exobrain/ or /brain dump/.
For years I've kept these note private but I realize that they could be useful
to others so I'll gradually move them here. I'll keep them updated and the
GitHub link provided will show the updates.

* All recipes
:PROPERTIES:
:EXPORT_HUGO_SECTION: recipes
:EXPORT_HUGO_AUTO_SET_LASTMOD: t
:EXPORT_HUGO_FRONT_MATTER_KEY_REPLACE: tags>rtags
:END:
** Sway config :linux:config:wayland:
:PROPERTIES:
:header-args: :mkdirp yes
:header-args:conf: :tangle "~/.config/sway/config"
:EXPORT_FILE_NAME: sway-config
:END:
Migrating to sway/wayland from i3wm/X. This bellow is my sway config. It can be
[[https://orgmode.org/manual/Extracting-Source-Code.html][tangled]] with [[https://orgmode.org/][Org Mode]] to appropriate locations. See [[https://github.com/igordejanovic/igordejanovic.github.io/blob/main/site.org][the source of this site]].

See https://wiki.archlinux.org/title/Sway

Put a warning at the beginning of the tangled file just to be sure not to forget.
#+begin_src conf
#Warning: this config is maintained through Org Mode file. Do not edit directly!
#+end_src

*** Install
#+begin_src sh
sudo pacman -S wayland xorg-xwayland sway swaylock swaybg
#+end_src

See other sections for the installation of other tools used in this config.

The standard location of sway config is =~/.config/sway/config=.

*** Some variables used in the config
#+begin_src conf
set {
#+end_src

~Mod4~ is the ~Win~ key on most keyboards. Since it is unused for other purposes it
is ideal to be a sway modifier key.
#+begin_src conf
    $mod Mod4
#+end_src

Sway config root.
#+begin_src conf
    $sway ~/.config/sway
#+end_src

A script to handle lock/suspend.
#+begin_src conf
    $exit $sway/exit.sh

#+end_src

A script for managing multiple displays. See [[#display-profile][bellow]].
#+begin_src conf
    $display_profile $sway/display-profile.sh
#+end_src

Socket used for [[https://github.com/francma/wob][wob]], a tool for creating overlay bar during setting of volume,
screen brightness etc. Create it with ~mkfifo~. See the README of the project. See
[[#media-buttons][bellow for the usage]].
#+begin_src conf
    $SWAYSOCK.wob ~/.local/share/sway-wob.sock
#+end_src

#+begin_src conf
}
#+end_src
*** Windows setup
Use minimal borders.
#+begin_src conf
default_border pixel 2
#+end_src

Use Mouse+$mod to drag floating windows to their wanted position.
#+begin_src conf
floating_modifier $mod
#+end_src

Background color.
#+begin_src conf
output "*" bg "#002244" solid_color
#+end_src

Font for window titles and swaybar.
#+begin_src conf
font pango:Hack 10
#+end_src

*** Basic keybindings

Start alacritty terminal:
#+begin_src conf
bindsym $mod+Return exec alacritty
#+end_src

Screenshot can be taken with [[https://github.com/emersion/grim][grim]] which uses [[https://github.com/emersion/slurp][slurp]] to select a region and then
open the captured image in [[https://wiki.gnome.org/Apps/gthumb][gthumb]]:
#+begin_src conf
bindsym Print exec grim -g "$(slurp)" ~/screenshot.png && gthumb ~/screenshot.png
#+end_src

Kill focused window:
#+begin_src conf
bindsym $mod+Shift+q kill
#+end_src

Switch back and forth between workspaces:
#+begin_src conf
workspace back_and_forth yes
bindsym $mod+tab workspace back_and_forth
#+end_src

Change focus (use vim bindings).
#+begin_src conf
bindsym $mod+h focus left
bindsym $mod+j focus down
bindsym $mod+k focus up
bindsym $mod+l focus right
#+end_src

Move focused window (vim bindings):
#+begin_src conf
bindsym $mod+Shift+h move left
bindsym $mod+Shift+j move down
bindsym $mod+Shift+k move up
bindsym $mod+Shift+l move right
#+end_src

Split in horizontal and vertical orientations. When pressing a hint is displayed
on the window where the next application will be positioned.
#+begin_src conf
bindsym $mod+b split h
bindsym $mod+v split v
#+end_src

Toggle fullscreen mode for focused window:
#+begin_src conf
bindsym $mod+f fullscreen toggle
#+end_src

Change container layout (stacked, tabbed, toggle split):
#+begin_src conf
bindsym $mod+s layout stacking
bindsym $mod+w layout tabbed
bindsym $mod+e layout toggle split
#+end_src

Toggle tiling/floating:
#+begin_src conf
bindsym $mod+Shift+space floating toggle
#+end_src

Change fofuc between tiling/floating windows
#+begin_src conf
bindsym $mod+space focus mode_toggle
#+end_src

Focus the parent/child container:
#+begin_src conf
bindsym $mod+a focus parent
bindsym $mod+Shift+a focus child
#+end_src

Reload configuration file:
#+begin_src conf
bindsym $mod+Shift+r reload
#+end_src

Exit sway. Log out of wayland session:
#+begin_src conf
bindsym $mod+Shift+e exec "swaynag -t warning -m 'You pressed the exit shortcut. Do you really want to exit sway? This will end your wayland session.' -B 'Yes, exit sway' 'swaymsg exit'"
#+end_src

*** Workspaces and window associations
Define names for default workspaces for which we configure key bindings later on. We use variables to avoid repeating the names in multiple places.
#+begin_src conf
set $ws1 "1:editor"
set $ws2 "2:browser"
set $ws3 "3:message"
set $ws4 "4:files"
Set $ws5 "5:"
set $ws6 "6"
set $ws7 "7"
set $ws8 "8"
set $ws9 "9"
set $ws10 "10:music"
#+end_src

Switch to workspace:
#+begin_src conf
bindsym $mod+1 workspace $ws1
bindsym $mod+2 workspace $ws2
bindsym $mod+3 workspace $ws3
bindsym $mod+4 workspace $ws4
bindsym $mod+5 workspace $ws5
bindsym $mod+6 workspace $ws6
bindsym $mod+7 workspace $ws7
bindsym $mod+8 workspace $ws8
bindsym $mod+9 workspace $ws9
bindsym $mod+0 workspace $ws10
#+end_src

Move workspace to left/right output:
#+begin_src conf
bindsym $mod+Shift+Alt+h move workspace to output left
bindsym $mod+Shift+Alt+l move workspace to output right
#+end_src

You can map workspace to output using this. Can be handy in multi-display
setups.
#+begin_src conf :tangle no
workspace "1:editor" output DP1 eDP1
workspace "2:browser" output DP1 eDP1
#+end_src

Assign application window classes to workspaces:
#+begin_src conf
assign [class="Viber"] "3:message"
assign [class="Skype"] "3:message"
assign [class="Audacious"] "10:music"
#+end_src

/TODO: Write how to get the name of the application class./

Send curent workspace to other output:
#+begin_src conf
bindsym $mod+o exec swaymsg -t get_outputs | \
        jq '.[] | select(.focused!=true) | .name' | head -n1 | xargs swaymsg move workspace to
#+end_src

[[https://github.com/swaywm/sway/issues/4346][Source]]

Move focused container to workspace:
#+begin_src
bindsym $mod+Shift+1 move container to workspace $ws1
bindsym $mod+Shift+2 move container to workspace $ws2
bindsym $mod+Shift+3 move container to workspace $ws3
bindsym $mod+Shift+4 move container to workspace $ws4
bindsym $mod+Shift+5 move container to workspace $ws5
bindsym $mod+Shift+6 move container to workspace $ws6
bindsym $mod+Shift+7 move container to workspace $ws7
bindsym $mod+Shift+8 move container to workspace $ws8
bindsym $mod+Shift+9 move container to workspace $ws9
bindsym $mod+Shift+0 move container to workspace $ws10
#+end_src
*** Media buttons with bar overlay
:PROPERTIES:
:CUSTOM_ID: media-buttons
:END:
Install [[https://github.com/francma/wob][wob]]:
#+begin_src sh
sudo pacman -S wob
#+end_src

Setup named pipe/socket (do this once):
#+begin_src sh
mkfifo ~/.local/share/sway-wob.sock
#+end_src

Connect socket to wob in the config:
#+begin_src conf
exec tail -f $SWAYSOCK.wob | wob
#+end_src
**** Screen brightness
Install [[https://github.com/haikarainen/light][light]]:
#+begin_src sh
sudo pacman -S light
#+end_src

Call light on brightness keys and pipe to wob:
#+begin_src conf
bindsym XF86MonBrightnessUp exec light -A 10 && light -G | cut -d'.' -f1 > $SWAYSOCK.wob
bindsym XF86MonBrightnessDown exec light -U 10 && light -G | cut -d'.' -f1 > $SWAYSOCK.wob
#+end_src

**** Media player controls
Install [[https://github.com/altdesktop/playerctl][playerctl]]:
#+begin_src sh
sudo pacman -S playerctl
#+end_src

Call playerctl on media keys:
#+begin_src conf
bindsym XF86AudioPlay exec playerctl play-pause
bindsym XF86AudioStop exec playerctl stop
bindsym XF86AudioNext exec playerctl next
bindsym XF86AudioPrev exec playerctl previous
#+end_src

**** Sound volume
Install [[https://github.com/cdemoulins/pamixer][pamixer]]:
#+begin_src sh
sudo pacman -S pamixer
#+end_src

Call pamixer on volume keys and pipe to wob:
#+begin_src conf
bindsym XF86AudioRaiseVolume exec pamixer -ui 5 && pamixer --get-volume > $SWAYSOCK.wob
bindsym XF86AudioLowerVolume exec pamixer -ud 5 && pamixer --get-volume > $SWAYSOCK.wob
bindsym XF86AudioMute exec pamixer --toggle-mute
#+end_src
*** Window resizing
#+begin_src conf
# resize window (you can also use the mouse for that)
mode "resize" {
        # These bindings trigger as soon as you enter the resize mode
        bindsym {
          h resize shrink width 10 px or 10 ppt
          j resize grow height 10 px or 10 ppt
          k resize shrink height 10 px or 10 ppt
          l resize grow width 10 px or 10 ppt

          # back to normal: Enter or Escape or $mod+r
          Return mode "default"
          Escape mode "default"
          $mod+r mode "default"
        }
}
bindsym $mod+r mode "resize"
#+end_src
*** System mode
#+begin_src conf
set $mode_system System (l) lock, (e) logout, (s) suspend, (r) reboot, (Shift+s) shutdown
mode "$mode_system" {
    bindsym l exec $exit lock; mode "default"
    bindsym e exec $exit logout
    bindsym s exec $exit suspend; mode "default"
    bindsym r exec systemctl reboot
    bindsym Shift+s exec systemctl shutdown

    # back to normal: Enter or Escape
    bindsym Return mode "default"
    bindsym Escape mode "default"
}
bindsym $mod+End mode "$mode_system"
#+end_src

Exit script which locks and unmounts encFS mounts on suspend.
#+begin_src sh :shebang "#!/bin/sh" :tangle "~/.config/sway/exit.sh"
lock() {
    swaylock -c 003300
}

case "$1" in
    lock)
        lock
        ;;
    logout)
        swaymsg 'exit'
        ;;
    suspend)
        lock && encfs -u ~/Consulting && encfs -u ~/.ssh && ssh-add -D && systemctl suspend
        ;;
    ,*)
        echo "Usage: $0 {lock|logout|suspend}"
        exit 2
esac

exit 0
#+end_src
*** Display mode
:PROPERTIES:
:CUSTOM_ID: display-profile
:END:
Screen modes by location.

*Note:* mirroring is not [[https://github.com/swaywm/sway/issues/1666][yet properly supported by sway]] but there is [[https://github.com/Ferdi265/wl-mirror][wl-mirror]] as
a workaround. See also [[https://bbs.archlinux.org/viewtopic.php?id=245038][this]].
#+begin_src conf
set $mode_display LOCATION: (l)aptop (h)ome (m)eeting (d)ual dual-(r)ight (p)res-low
mode "$mode_display" {
     bindsym {
             l exec $display_profile laptop, mode "default"
             h exec $display_profile home, mode "default"
             d exec $display_profile dual, mode "default"
             r exec $display_profile dual-right, mode "default"
             m exec $display_profile meeting, mode "default"
             p exec $display_profile pres-lowres, mode "default"

             # back to normal: Enter or Escape
             Return mode "default"
             Escape mode "default"
     }
}
bindsym $mod+x mode "$mode_display"
#+end_src

Mirroring of output can be done with:
#+begin_src sh
wl-mirror eDP-1
#+end_src

To mirror only a part of the output combine with slurp:
#+begin_src sh
wl-mirror -r "$(slurp)"
#+end_src

**** =display-profile= script
#+begin_src sh :shebang "#!/bin/sh" :tangle "~/.config/sway/display-profile.sh"
# Set display profiles for various locations.
# WARNING! This script is maintained through Org Mode file. Do not edit directly.

LOCATION=$1
LAPTOP_OUTPUT=eDP-1
LAPTOP_MODE=`swaymsg -t get_outputs | jq ".[] | select(.name==\"$LAPTOP_OUTPUT\") | .modes[-1]"`
LAPTOP_RES=`echo $LAPTOP_MODE | jq ".width"`x`echo $LAPTOP_MODE | jq ".height"`
LAPTOP_WIDTH=`echo $LAPTOP_MODE | jq ".width"`

# Get auxiliary output
AUX_OUTPUT_JSON=`swaymsg -t get_outputs | jq ".[] | select(.name!=\"$LAPTOP_OUTPUT\")"`
AUX_MODE=`echo $AUX_OUTPUT_JSON | jq ".modes[0]"`
AUX_OUTPUT=`echo $AUX_OUTPUT_JSON | jq ".name"`
AUX_RES=`echo $AUX_MODE | jq ".width"`x`echo $AUX_MODE | jq ".height"`
AUX_WIDTH=`echo $AUX_MODE | jq ".width"`

echo $LAPTOP_OUTPUT
echo $LAPTOP_RES
echo $LAPTOP_WIDTH
echo $AUX_RES
echo $AUX_OUTPUT
echo $AUX_RES

move_workspaces_to_output(){
    OUTPUT=$1
    for i in {1..10}
    do
        swaymsg "[workspace=$i]" move workspace to output $OUTPUT
    done
}

case "$LOCATION" in
    "laptop")
        swaymsg output $LAPTOP_OUTPUT enable pos 0 0 res $LAPTOP_RES
        swaymsg output $AUX_OUTPUT disable
    ;;

    "home")
        swaymsg output $AUX_OUTPUT enable pos 0 0 res $AUX_RES, \
                output $LAPTOP_OUTPUT disable
    ;;

    "dual")
        swaymsg output $AUX_OUTPUT enable pos 0 0 res $AUX_RES scale 1, \
                output $LAPTOP_OUTPUT enable pos $AUX_WIDTH 0
        move_workspaces_to_output $LAPTOP_OUTPUT
    ;;

    "dual-right")
        swaymsg output $AUX_OUTPUT enable pos $AUX_WIDTH 0 res $AUX_RES scale 1, \
                output $LAPTOP_OUTPUT enable pos 0 0
        move_workspaces_to_output $LAPTOP_OUTPUT

    ;;

    "meeting")
        swaymsg output $AUX_OUTPUT enable pos $AUX_WIDTH 0 res $AUX_RES scale 1.5, \
                output $LAPTOP_OUTPUT enable pos 0 0
        move_workspaces_to_output $LAPTOP_OUTPUT
    ;;

    "pres-lowres")
        swaymsg output $AUX_OUTPUT enable pos $LAPTOP_WIDTH 0 res 1280x1024, \
                output $LAPTOP_OUTPUT enable
        move_workspaces_to_output $LAPTOP_OUTPUT
    ;;

esac

#+end_src
*** waybar
Config sway to use waybar.
#+begin_src conf
bar {
       swaybar_command waybar
}
#+end_src

Install font =Hack Nerd= used for swaync notification icons.
#+begin_src sh
sudo pacman -S ttf-hack-nerd
#+end_src

Waybar configuration:
#+begin_src conf :tangle "~/.config/waybar/config"
{
    "layer": "top",
    "position": "bottom",

    "modules-left": [
        "sway/workspaces",
        "custom/right-arrow-dark",
    "sway/mode"
    ],
    //"modules-center": [
        // "custom/left-arrow-dark",
        // "custom/weather",
        //"custom/left-arrow-light",
        //"custom/left-arrow-dark",
        //"clock#1",
        //"custom/left-arrow-light",
        //"custom/left-arrow-dark",
        //"clock#2",
        //"custom/right-arrow-dark"
        // "custom/right-arrow-light",
        //"clock#3",
        //"custom/right-arrow-dark",

    //],
    "modules-right": [
        "custom/left-arrow-dark",
        "network",
        "custom/left-arrow-light",
        "custom/left-arrow-dark",
        "memory",
        "custom/left-arrow-light",
        "custom/left-arrow-dark",
        "cpu",
        "custom/left-arrow-light",
        "custom/left-arrow-dark",
        "battery",
        "custom/left-arrow-light",
        "custom/left-arrow-dark",
        "pulseaudio",
        "custom/left-arrow-light",
        "custom/left-arrow-dark",
//      "idle_inhibitor",
        "custom/notification",
        "custom/left-arrow-light",
        "custom/left-arrow-dark",
        "sway/language",
        "custom/left-arrow-light",
        "custom/left-arrow-dark",
        "tray",
        "custom/weather",
        "custom/left-arrow-light",
        "custom/left-arrow-dark",
        "clock#2",
        "custom/right-arrow-dark"
    ],

    "custom/left-arrow-dark": {
        "format": "",
        "tooltip": false
    },
    "custom/left-arrow-light": {
        "format": "",
        "tooltip": false
    },
    "custom/right-arrow-dark": {
        "format": "",
        "tooltip": false
    },
    "custom/right-arrow-light": {
        "format": "",
        "tooltip": false
    },

    "sway/workspaces": {
        "disable-scroll": true,
        "format": "{name}"
    },

    "clock#1": {
        "format": "{:%a}",
        "tooltip": false
    },
    "clock#2": {
        "format": "{:%H:%M}",
        "tooltip": false
    },
    "clock#3": {
        "format": "{:%d-%m}",
        "tooltip": false
    },
    "custom/weather": {
        "exec": "curl 'https://wttr.in/?format=1' -s | cut -c 1-6,9-15",
        "interval": 3600
    },
    "sway/language": {
        "format": "{}",
        "max-length": 5,
        "min-length": 5,
    },
    "pulseaudio": {
        "format": "{icon} {volume:2}%",
        "format-bluetooth": "{icon}  {volume}%",
        "format-muted": "MUTE",
        "format-icons": {
            "headphones": "",
            "default": [
                "",
                ""
            ]
        },
        "scroll-step": 5,
        "on-click": "pamixer -t",
        "on-click-right": "pavucontrol"
    },
    "memory": {
        "interval": 5,
        "format": "Mem {}%"
    },
    "cpu": {
        "interval": 5,
        "format": "CPU {usage:2}%"
    },
    "battery": {
        "states": {
            "good": 95,
            "warning": 30,
            "critical": 15
        },
        "format": "{icon} {capacity}%",
        "format-icons": [
            "",
            "",
            "",
            "",
            ""
        ]
    },
  "network": {
      // "interface": "wlp2*", // (Optional) To force the use of this interface
      "interval": 3,
      "format-wifi": "{essid} ({signalStrength}%, {bandwidthDownBits}|{bandwidthUpBits}) ",
      "format-ethernet": "{ifname}: {ipaddr}/{cidr} ({bandwidthDownBits}|{bandwidthUpBits}) ",
      "format-linked": "{ifname} (No IP) ",
      "format-disconnected": "Disconnected ⚠",
      "format-alt": "{ifname}: {ipaddr}/{cidr}"
  },
  "idle_inhibitor": {
          "format": "{icon}",
          "format-icons": {
              "activated": "",
              "deactivated": ""
          }
  },
  "custom/notification": {
          "tooltip": false,
          "format": "{icon}",
          "format-icons": {
                  "notification": "<span foreground='red'><sup></sup></span>",
                  "none": "",
                  "dnd-notification": "<span foreground='red'><sup></sup></span>",
                  "dnd-none": ""
          },
          "return-type": "json",
          "exec-if": "which swaync-client",
          "exec": "swaync-client -swb",
          "on-click": "swaync-client -t -sw",
          "on-click-right": "swaync-client -d -sw",
          "escape": true
        },

   "tray": {
        "icon-size": 20
   }
}
#+end_src

**** css
#+begin_src css :tangle "~/.config/waybar/style.css"
,** {
    font-size: 15px;
    font-family: monospace;
}

window#waybar {
    background: #292b2e;
    color: #fdf6e3;
}

#custom-right-arrow-dark,
#custom-left-arrow-dark {
    color: #1a1a1a;
}
#custom-right-arrow-light,
#custom-left-arrow-light {
    color: #292b2e;
    background: #1a1a1a;
}

#workspaces,
#clock.1,
#clock.2,
#clock.3,
#custom-weather,
#custom-notification,
#language,
#pulseaudio,
#backlight,
#memory,
#cpu,
#temperature,
#network,
#battery,
#tray {
    background: #1a1a1a;
}

#workspaces button {
    padding: 0 2px;
    color: #fdf6e3;
}
#workspaces button.focused {
    color: #268bd2;
}
#workspaces button.urgent {
      background: #aa0000;
}
#workspaces button:hover {
    box-shadow: inherit;
    text-shadow: inherit;
}
#workspaces button:hover {
    background: #1a1a1a;
    border: #1a1a1a;
    padding: 0 3px;
}

#mode {
      background: #aa0000;
}

#pulseaudio {
    color: #268bd2;
}
#backlight {
    color: #b58900;
}
#memory {
    color: #2aa198;
}
#temperature {
    color: #b58900;
}
#cpu {
    color: #6c71c4;
}
#battery {
    color: #859900;
}
#battery.discharging {
      color: #dd9900;
}
#network {
  color: #8599aa;
}
#custom-notification {
  font-family: "NotoSansMono Nerd Font";
}

#mode,
#clock,
#pulseaudio,
#backlight,
#memory,
#cpu,
#custom-notification,
#custom-weather,
#temperature,
#battery {
    padding: 0 10px;
}
#+end_src

*** Application launcher, window switcher
[[https://github.com/davatorium/rofi][Rofi]] is a popular application launcher and window switcher. See also [[https://wiki.archlinux.org/title/Rofi][ArchLinux
wiki page]].

Currently original rofi has no support for wayland. There is a fork with wayland
support. Install with:
#+begin_src sh
yay -S --mflags "--nocheck" rofi-lbonn-wayland
#+end_src

~--nocheck~ is needed at the moment as there is [[https://github.com/lbonn/rofi/issues/63][a problem with libnkutils]]. If you
are reading this in a fairly distant future probably you won't need this.

Keyboard shortcut.
#+begin_src conf
bindsym $mod+d exec rofi -modes combi -show combi -combi-modes run,drun
#+end_src


**** Rofi configuration
#+begin_src conf :tangle "~/.config/rofi/config.rasi"
@theme "/usr/share/rofi/themes/Arc-Dark.rasi"
configuration {
    modi: "window,run,ssh";
    timeout {
        action: "kb-cancel";
        delay:  0;
    }
    filebrowser {
        directories-first: true;
        sorting-method:    "name";
    }
}

#+end_src

*** Clipboard
[[https://github.com/bugaevc/wl-clipboard][wl-clipboard]] is a command line tool for copy/pasting text.
#+begin_src sh
sudo pacman -S wl-clipboard
#+end_src

Now, text can be copied from CLI with ~<some command> | wl-copy~ or pasted from
clipboard with ~wl-paste | <some command>~.

A clipboard is emptied when window is closed by default. To persist clipboard
after window closing use clipboard manager like [[https://github.com/yory8/clipman][clipman]].

#+begin_src sh
sudo pacman -S clipman
#+end_src

Start with sway:
#+begin_src conf
exec wl-paste -t text --watch clipman store --no-persist
#+end_src

*** Touch pad
Enable tap and natural scroll.

#+begin_src conf
input type:touchpad {
    tap enabled
    natural_scroll enabled
}
#+end_src
*** Keyboards layouts
#+begin_src conf
input * {
  xkb_layout "us,rs,rs"
  xkb_variant ",latin,"
  xkb_options "grp:shifts_toggle"
}

#+end_src
*** Red shift
Install [[https://gitlab.com/chinstrap/gammastep][gammastep]]
#+begin_src sh
sudo pacman -S gammastep
#+end_src

Execute it from sway config with your long/lat:
#+begin_src conf
exec_always gammastep -l 45.26:19.83
#+end_src

There is also a tray indicator ~gammastep-indicator~. I'm not using it.

*** NetworkManager
Run applet with ~--indictator~ switch:
#+begin_src conf
exec_always nm-applet --indicator
#+end_src
*** TODO Bluetooth
Not working with sway. Will investigate.
#+begin_src conf :tangle no
exec blueman-applet
#+end_src

*** Wacom tablet
I use Wacom CTL-471 for screen annotation during lectures. [[https://github.com/OpenTabletDriver/OpenTabletDriver][OpenTabletDriver]] is a
user-mode cross-platform tablet driver with settings GUI.

Blacklist wacom kernel module:
#+begin_src sh
sudo sh -c "echo 'blacklist wacom' > /etc/modprobe.d/nowacom.conf"
#+end_src

#+begin_src sh
yay -S opentabletdriver
#+end_src

Start OTD from sway:
#+begin_src conf
exec otd
#+end_src

Run =otd-gui= for configuration.

Using [[https://github.com/bk138/gromit-mpx/][gromit-mpx]] for screen annotation.

There is a problem with capturing hotkeys. A workaround is to [[https://github.com/bk138/gromit-mpx/issues/127#issuecomment-1211957811][handle hotkeys
through sway]].

#+begin_src conf
mode "gromit-mpx" {
    # toggle painting
    bindsym f9 exec gromit-mpx --toggle
    # clear
    bindsym Shift+f9 exec gromit-mpx --clear
    # toggle visibility
    bindsym Ctrl+f9 exec gromit-mpx --visibility
    # quit
    bindsym Alt+f9 exec gromit-mpx --quit
    # undo
    bindsym f8 exec gromit-mpx --undo
    # redo
    bindsym Shift+f8 exec gromit-mpx --redo

    # Return to default mode
    bindsym $mod+g mode "default"
}
bindsym $mod+g mode "gromit-mpx"
#+end_src


Gromit-MPX use Xwayland. So to find the name of the device use:
#+begin_src sh
xinput --list
#+end_src

Gromit-MPX config with red and green pen and eraser:
#+begin_src conf :tangle "~/.config/gromit-mpx.cfg"
"red Pen" = PEN (size=7 color="red");
"green Pen" = "red Pen" (color="green");

"Eraser" = ERASER (size = 75);

"Virtual core pointer" = "red Pen";
"Virtual core pointer"[Button2] = "green Pen";
"Virtual core pointer"[Button3] = "Eraser";
#+end_src

#+begin_src ini :tangle "~/.config/gromit-mpx.ini"
[General]
ShowIntroOnStartup=false

[Drawing]
Opacity=0.75
#+end_src

*** Notification daemon
Using swaync.
#+begin_src sh
sudo yay -S swaync
#+end_src

Start with sway.
#+begin_src conf
exec_always swaync
#+end_src

Show pannel.
#+begin_src conf
bindsym $mod+grave exec swaync-client -t
#+end_src

Toggle Do-Not-Disturb mode.
#+begin_src conf
bindsym $mod+p exec swaync-client -d
#+end_src

Close all notifications:
#+begin_src conf
bindsym $mod+c exec swaync-client -C
#+end_src

See also the waybar configuration above.
*** Warning on battery critical level
Check battery, notify when low and suspend when critical.
Taken and adapted from [[https://wiki.archlinux.org/index.php/Laptop#Hibernate_on_low_battery_level][ArchLinux wiki]].

#+begin_src sh :tangle "~/.config/sway/check_battery.sh" :shebang "#!/bin/sh"
acpi -b | awk -F'[,:%]' '{print $2, $3}' | {
    read -r status capacity

    if [ "$status" = Discharging ]; then
           if [ "$capacity" -lt 5 ]; then
               systemctl suspend
           elif [ "$capacity" -lt 15 ]; then
               notify-send -u critical "Battery low" "Current capacity is (${capacity}%)."
           fi
    fi
}
#+end_src

Create crontab entry with command =crontab -e= which call check script at 5 minute
interval.
#+begin_src cron
*/5  * * * *  XDG_RUNTIME_DIR=/run/user/$(id -u) $HOME/.config/sway/check_battery.sh
#+end_src

*** Autostart apps
#+begin_src conf
exec {
  swaymsg 'workspace 1:editor; exec emacs'
  swaymsg 'workspace 2:browser; exec firefox'
}
#+end_src

** Terminal/shell tricks :linux:shell:terminal:config:
:PROPERTIES:
:EXPORT_FILE_NAME: terminal-tricks
:END:

*** Useful terminal shortcuts
| Shortcut | What it does?                                                                                               |
|----------+-------------------------------------------------------------------------------------------------------------|
| C-x C-e  | Edits the current line in the $EDITOR program, or vi if undefined.                                          |
| C-x C-r  | Read in the contents of the inputrc file, and incorporate any bindings or variable assignments found there. |
| C-x C-u  | Incremental undo, separately remembered for each line.                                                      |
| C-x C-v  | Display version information about the current instance of bash.                                             |
|          | In zsh switch to line vi mode (equivalent to =bindkey -v=)? Exit with Ctrl-c                                  |
| C-x C-x  | Alternates the cursor with its old position. (C-x, because x has a crossing shape).                         |
| C-x *    | Inline shell expansion                                                                                      |

*** [[https://alacritty.org/][Alacritty]] specific

| Shortcut      | What it does?                        |
|---------------+--------------------------------------|
| Ctl-Shift-SPC | Enter vi mode. Press again to leave. |
| Ctl-Shift-C   | Copy selection                       |
| Ctl-Shift-V   | Paste clipboard content              |

**** Regex hints
- Recognizing URLs and executing open command. Put this into
  =~/.config/alacritty/alacritty.yml=:
  #+begin_src yaml
hints:
  enabled:
   - regex: "(ipfs:|ipns:|magnet:|mailto:|gemini:|gopher:|https:|http:|news:|file:|git:|ssh:|ftp:)\
              [^\u0000-\u001F\u007F-\u009F<>\"\\s{-}\\^⟨⟩`]+"
     command: xdg-open
     post_processing: true
     mouse:
       enabled: true
       mods: None
     binding:
       key: U
       mods: Control|Shift
  #+end_src

  Now you can press =Ctrl-Shift-U= to get hints overlay (a letter for each
  recognized URL on the terminal). Press the letter to execute =xdg-open= over the
  matched content (URL).

**** Color schemes with dynamic change
Nice color schemes can be found in [[https://github.com/eendroroy/alacritty-theme][eendroroy/alacritty-theme]] repo.

#+begin_src sh
git clone https://github.com/eendroroy/alacritty-theme.git ~/.alacritty-colorscheme
#+end_src

Link to default location:
#+begin_src sh
ln -s ~/.alacritty-colorscheme/themes ~/.config/alacritty/colors
#+end_src

Color scheme can be applied either statically inside alacritty config:
#+begin_src yaml
import:
  - ~/.alacritty-colorscheme/themes/{scheme_name}.yaml
#+end_src

or dynamically using [[https://github.com/toggle-corp/alacritty-colorscheme][alacritty-colorscheme]]:
#+begin_src sh
pip install --user alacritty-colorscheme
#+end_src

List schemes by:
#+begin_src sh
alacritty-colorscheme list
#+end_src

See current scheme by:
#+begin_src sh
alacritty-colorscheme status
#+end_src

Toggle by:
#+begin_src sh
alacritty-colorscheme -V toggle one_dark.yaml papercolor_light.yaml
#+end_src

Make keybinding in =~/.config/alacritty/alacritty.yml=:
#+begin_src yaml :tangle "~/.config/alacritty/alacritty.yml"
key_bindings:
  - { key: F12, command: { program: "alacritty-colorscheme", args: ["-V",  "toggle",  "one_dark.yaml",  "papercolor_light.yaml"] } }

#+end_src

**** Spawn a new instance in the same directory
Add to =~/.config/alacritty/alacritty.yml=:
#+begin_src yaml
key_bindings:
  - { key: Return,   mods: Control|Shift, action: SpawnNewInstance }
#+end_src

*** Tricks with zsh and [[https://ohmyz.sh/][oh-my-zsh]]
- https://www.sitepoint.com/zsh-commands-plugins-aliases-tools/

**** Go up to the root of Git repo :oh-my-zsh:
Put this in ~.zshrc~:
#+begin_src sh
plugins+=(git)
#+end_src

This adds alias ~grc~ that cd to the root of the repo. For other aliases see [[https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/git][here]].

[[https://stackoverflow.com/a/74648494/2024430][Source]].
** Guix tips and tricks :guix:linux:
:PROPERTIES:
:EXPORT_FILE_NAME: guix-tips-and-tricks
:END:
*** Useful [[https://guix.gnu.org/][Guix]] commands

| subcommand (guix ...)                     | description                                   |
|-------------------------------------------+-----------------------------------------------|
| =describe --format=channel=                 | Decribe channels in Guile format              |
| =search <what>=                             | Search packages                               |
| =install <packages>=                        | Install packages and make a new generation    |
| =package --list-installed (or -I)=          | List installed packages                       |
| =package -A=                                | List available packages                       |
| =package -A wlr=                            | List available containing given word in name  |
| add =--profile=<path>= to previous commands | List installed packages from given profile    |
| =package --roll-back=                       | Roll-back to previous generation              |
| =package --list-generations=                | List generations                              |
| =package --switch-generation <>=            | Switch to given generation by number          |
| =size <package>=                            | Report size of package and its deps           |
| =graph -M 2 <package>=                      | Produce =dot= graph of deps with depth 2        |
|                                           | ..pipe to =xdot -= to visualize                 |
| =weather <package>=                         | Check if package is available as a substitute |
| =pull=                                      | Update channels                               |

- List system level packages (works only of a full Guix system):
  #+begin_src sh
  guix packages --list-installed --profile=/run/current-system/profile
  #+end_src

*** Additional channels
In =~/.config/guix/channels.scm=:
#+begin_src scheme
(cons*
 (channel
  (name 'nonguix)
  (url "https://gitlab.com/nonguix/nonguix")
  (introduction
   (make-channel-introduction
    "897c1a470da759236cc11798f4e0a5f7d4d59fbc"
    (openpgp-fingerprint
     "2A39 3FFF 68F4 EF7A 3D29  12AF 6F51 20A0 22FB B2D5"))))
 (channel
  (name 'guix-gaming-games)
  (url "https://gitlab.com/guix-gaming-channels/games.git")
  (introduction
   (make-channel-introduction
    "c23d64f1b8cc086659f8781b27ab6c7314c5cca5"
    (openpgp-fingerprint
     "50F3 3E2E 5B0C 3D90 0424  ABE8 9BDC F497 A4BB CC7F"))))

 %default-channels)
#+end_src
*** Run Guix in VM
#+begin_src sh
wget https://ftp.gnu.org/gnu/guix/guix-system-vm-image-1.4.0.x86_64-linux.qcow2
qemu-system-x86_64 \
   -nic user,model=virtio-net-pci \
   -enable-kvm -m 2048 \
   -device virtio-blk,drive=myhd \
   -drive if=none,file=guix-system-vm-image-1.4.0.x86_64-linux.qcow2,id=myhd
#+end_src

*** Install Guix in VM
#+begin_src sh
wget https://ftp.gnu.org/gnu/guix/guix-system-install-1.4.0.x86_64-linux.iso
wget https://ftp.gnu.org/gnu/guix/guix-system-install-1.4.0.x86_64-linux.iso.sig
gpg --verify guix-system-install-1.4.0.x86_64-linux.iso.sig
# Ako nemam GPG javni ključ
wget https://sv.gnu.org/people/viewgpg.php?user_id=15145 -qO - | gpg --import -

# Copy on a USB stick
dd if=guix-system-install-1.4.0.x86_64-linux.iso of=/dev/sdX status=progress
sync

# Run in VM
qemu-img create -f qcow2 guix-system-igord.qcow2 50G
qemu-system-x86_64 -m 1024 -smp 1 -enable-kvm \
  -nic user,model=virtio-net-pci -boot menu=on,order=d \
  -drive file=guix-system-igord.qcow2 \
  -drive media=cdrom,file=guix-system-install-1.4.0.x86_64-linux.iso
  #+end_src

- Follow installation instructions.
- After the installation is complete run the image in VM as described in a
  previous node.
  #+begin_src sh
    qemu-system-x86_64 -m 1024 -smp 1 -enable-kvm \
    -nic user,model=virtio-net-pci -boot menu=on,order=d \
    -drive file=guix-system-igord.qcow2
  #+end_src
- System config is in =/etc/config.scm=. To change configuration run:
  #+begin_src sh
guix pull
sudo guix system reconfigure /etc/config.scm
  #+end_src

See the manual.

*** Mount local folder inside QEMU
#+begin_src sh
qemu-system-x86_64 -m 2048 -smp 1 -enable-kvm \
-nic user,model=virtio-net-pci -boot menu=on,order=d \
-drive file=guix-system-igord.qcow2 -virtfs local,path=/home/igor/repos/config/guix/,security_model=passthrough,mount_tag=host0,id=host0
#+end_src

- Inside the guest:
  #+begin_src sh
    mkdir config
    sudo mount -t 9p -o trans=virtio,version=9p2000.L host0 ~/config
  #+end_src
*** Running Guix Shell
#+begin_src sh
guix shell --container python coreutils procps grep less util-linux bash -- bash
#+end_src

- or simply:
  #+begin_src sh
    guix shell -e '(@ (gnu) %base-packages)'
  #+end_src
- or with isolation just to the current folder:
  #+begin_src sh
    guix shell --container -e '(@ (gnu) %base-packages)'
  #+end_src

*** Interesting install config with non-free stuff
- [[https://www.reddit.com/r/GUIX/comments/epckio/gnu_system_with_wayland_and_sway/][On reddit]]
*** Configure new system inside QEMU from Arch
- Configuration in =~/repos/config/guix=.
- [[*Mount local folder inside QEMU][Mount the folder]] inside QEMU and run the image.
- Reconfigure with =sudo guix system reconfigure ~/config/system.scm=
*** Copy paste with QEMU
- For this [[https://spice-space.org/][SPICE]] is used. See [[https://www.linux-kvm.org/page/SPICE][this tutorial]].
- But it looks like it wont work with sway.
*** Use sway/wayland inside QEMU
- [[https://ask.fedoraproject.org/t/run-sway-in-qemu/23753][Interesting try]]. It kinda works.
  #+begin_src sh
    qemu-system-x86_64 \
    -m 2G -smp 1 -enable-kvm \
    -nic user,model=virtio-net-pci \
    -boot menu=on,order=d \
    -drive file=guix-system-igord.qcow2 \
    -virtfs local,path=/home/igor/repos/config/,security_model=passthrough,mount_tag=host0,id=host0 \
    -device intel-hda \
    -device hda-duplex \
    -device virtio-vga-gl \
    -display gtk,gl=on
  #+end_src
** Git tips :programming:git:
:PROPERTIES:
:EXPORT_FILE_NAME: git-tips
:END:
*** How to get the changes on a branch in Git

#+BEGIN_SRC sh
# Changes on branch but not on HEAD (three dots)
git diff HEAD...branch
#
#+END_SRC
*** List recent branches and switch
#+BEGIN_SRC sh
$ git checkout $(git for-each-ref --sort='-authordate:iso8601' --format=' %(authordate:relative)%09%(refname:short)' refs | pick | cut -f2)
# .gitconfig alias
[alias]
branches = "!sh -c \"git checkout $(git for-each-ref --sort='-authordate:iso8601' --format=' %(authordate:relative)%09%(refname:short)' refs | pick | cut -f2)\""
#+END_SRC

 [[https://github.com/rafaelrinaldi/til/blob/master/git/list-branches-by-date.md][Source]]. Uses [[https://github.com/mptre/pick][pick]].

*** See branches merged into other branch
#+BEGIN_SRC sh
git branch --merged master    # lists branches merged into master
git branch --merged           # lists branches merged into HEAD (i.e. tip of current branch)
git branch --no-merged        # lists branches that have not been merged
# add -a for all branches (local/remote) or -r for remote only
#+END_SRC

[[https://stackoverflow.com/questions/226976/how-can-i-know-if-a-branch-has-been-already-merged-into-master][Source]]

*** Finding best common ancestors of two commits/branches
#+BEGIN_SRC sh
git merge-base <commit> <commit>
#+END_SRC

[[https://stackoverflow.com/a/40011122/2024430][Source]]

*** Check if the branch is current
#+BEGIN_SRC sh
$ git fetch && git branch -r --merged | grep -q origin/master && echo Incorporates origin/master || echo Out of date from origin/master

# In ~/.gitconfig
[alias]
   current = !git branch -r --merged | grep -q $1 && echo Incorporates $1 || echo Out of date from $1 && :

And then run:
$ git current origin/master
#+END_SRC

[[https://stackoverflow.com/a/53325693/2024430][Source]]

*** Check if branch can merge without conflicts
#+BEGIN_SRC sh
git merge other-branch --no-commit --no-ff
git merge --abort
#+END_SRC

[[https://stackoverflow.com/a/6335937/2024430][Source]]

*** See commits from a branch but not from merged in branches
#+BEGIN_SRC sh
git log --first-parent
#+END_SRC

[[https://stackoverflow.com/questions/10248137/git-how-to-list-commits-on-this-branch-but-not-from-merged-branches][Source]]

*** See what is on a branch
#+BEGIN_SRC sh
# Find commit on this
# branch that changed something in the current folder
git log $(git merge-base first_branch HEAD)..HEAD .

git log --no-merges master..
git log --no-merges master..HEAD --author="Jason" .
#+END_SRC

*** See files in conflict
#+BEGIN_SRC sh
git diff --name-only --diff-filter=U
#+END_SRC

*** Check for conflict markers in code
#+BEGIN_SRC sh
git diff --check
#+END_SRC

*** Leaderboards - number of commit by user sorted
#+BEGIN_SRC sh
git shortlog -sn --all --no-merges
git shortlog -sn --since='10 weeks' --until='2 weeks'
#+END_SRC

*** See recent branches you have been working on
#+BEGIN_SRC sh
git for-each-ref --count=10 --sort=-committerdate refs/heads/ --format="%(refname:short)"
# alias
recent = "for-each-ref --count=10 --sort=-committerdate refs/heads/ --format='%(refname:short)'"

#+END_SRC

*** Remind yourself what you have been doing
#+BEGIN_SRC sh
git log --all --oneline --no-merges --author=igor.dejanovic
# alias
recap = "log --all --oneline --no-merges --author=igor.dejanovic"
#+END_SRC
*** See what is changed in the merge conflict resolution
#+begin_src sh
git diff hash hash^1 hash^2
#+end_src

[[https://stackoverflow.com/questions/16573555/show-conflict-diff-part-of-a-merge][Source]]

*** [[https://medium.com/@porteneuve/fix-conflicts-only-once-with-git-rerere-7d116b2cec67][git rerere - reuse recorded resolutions]]
*** Delete local branches whose remotes were deleted
#+begin_src sh
git config --global alias.gone "! git fetch -p && git for-each-ref --format '%(refname:short) %(upstream:track)' | awk '\$2 == \"[gone]\" {print \$1}' | xargs -r git branch -D"
#+end_src

[[https://stackoverflow.com/questions/41592156/git-command-to-remove-local-branches-that-have-a-deleted-upstream][Source]]. Now =git gone= will delete all local branches whose remotes were deleted.

*** Find large files in the repo history
- This works but is slow for large repos.
#+begin_src sh
git rev-list --all | while read rev ; do git ls-tree -rl --full-name $rev ; done | sort -k4 -nr | uniq > large.txt
#+end_src

- This works much faster! See https://stackoverflow.com/a/42544963/2024430
  Use ~--since="2022-09-10"~ to return only recent blobs.
#+begin_src sh
git rev-list --objects --all |
  git cat-file --batch-check='%(objecttype) %(objectname) %(objectsize) %(rest)' |
  sed -n 's/^blob //p' |
  sort --numeric-sort --key=2 |
  cut -c 1-12,41- |
  numfmt --field=2 --to=iec-i --suffix=b --padding=7 --round=neares
#+end_src
*** Compare two branches
Some commands use [[https://apps.kde.org/kompare/][kompare]] or [[http://meldmerge.org/][meld]].

- Show only file names ignoring whitespace (=-w=):
  #+begin_src sh
  git diff -w --name-status master..integration
  #+end_src
- Show changes between tips of two branches.
  #+begin_src sh
  git diff master..integration | kompare -
  #+end_src
- See the diff of modified files only between two branches in folder =src=.
  #+begin_src sh
  git diff -w --diff-filter=M master..integration src/ | kompare -
  #+end_src
- See what is on branch =integration= but not on =master= (notice three dots).
  #+begin_src sh
  git diff master...integration | kompare -
  #+end_src
- To use meld in previous recipes do the following:
  1. Configure meld as a diff tool:
     #+begin_src sh
     git config --global diff.tool meld
     #+end_src
  2. Use git =--dir-diff=. For example:
     #+begin_src sh
     git difftool -d master...integration
     #+end_src
*** References
- https://csswizardry.com/2017/05/little-things-i-like-to-do-with-git/

** Debugging Elisp :emacs:programming:
:PROPERTIES:
:EXPORT_FILE_NAME: debugging-elisp
:END:
*** TODO print debugging :noexport:
*** =debug=
=debug= is a Lisp machine stack back-trace debugger.

Usual workflow:

1. Choose the way to initiate debugger. E.g. call =debug-on-entry= and choose a
   function. See bellow for other options.
2. Do some operation that should eventually call the function.
3. In the backtrace inspect the state, step through, look at locals, evaluate
   expressions etc. See bellow for useful shortcuts.


- Initiating debugger - useful shortcuts/functions ::
  - =debug-on-error= - enters the debugger if an error is found.
  - =debug-on-entry= - starts debugger when entering the given function. Multiple
    function can be given by calling this function many times. To remove a
    function use =cancel-debug-on-entry=.
  - =debug-on-message= - this is a variable. If non-nil it is interpreted as a
    regex which is matched against printed messages and it breaks into debugger
    if a match is found. Useful if you see a message printed and would like to
    investigate the location.
  - =debug-watch= - run debugger when variable changes. To remove use function
    =cancel-debug-watch=.
  - In addition, a call to =(debug)= can be used in the code to break into
    debugger. Thus, find a place where =debug= call won't introduce side-effects
    and insert it. Don't forget to re-evaluate =defun= after change (=eval-defun=).
    Also, don't forget to remove =(debug)= call and re-evaluate =defun= again when
    finished debugging.

- Useful shortcuts/functions in the backtrace buffer ::
  - =g l - debugger-list-functions= - list function instrumented to break into.
  - =p - debugger-toggle-locals= - show/hide local variables for the given stack
    frame.
  - =z o - backtrace-multi-line= - pretty-print the stack backtrace line.
  - =z c - backtrace-single-line= - returns to a single line representation (undo
    previous).
  - =g b - debugger-frame= - request entry to debugger when the frame exits. Will
    be marked with asterisk at the left side.
  - =u - debugger-frame-clear= - undo previous command.
  - =d - debugger-step-through= - make a step through subexpressions evaluations.
  - =c - debugger-continue= - continue evaluating without stopping. Stop on the
    next marked frame with =debugger-frame=.
  - =r - debugger-return-value= -
  - =E - debugger-eval-expression= - evaluate given expression in the context of
    the stack frame at point. For investigating local variables see
    =debugger-toggle-locals= above. /This should be checked!/
  - =backtrace-goto-source= - this should go to the source location of the current
    stack frame, but [[https://emacs.stackexchange.com/questions/64926/emacs-elisp-debugger-how-do-i-make-the-debugger-jump-to-source-when-i-press-s][it's not working at the moment]] which is pity as it would
    really make a huge difference.

*** =edebug=
=edebug= is a source-level debugger. It provides a step-by-step execution through
the source code.

Breaking into debugger is performed using the code instrumentation, i.e. the
original code is replaced with a slightly modified code which calls the
debugger.

- Useful shortcuts/functions ::
  - =SPC u , e d - eval-defun= with universal prefix - instrument current
    function. Evaluating without the prefix will remove instrumentation.

**** Tracing

=edebug= can record an execution trace capturing in a =*edebug-trace*= buffer each
function called with parameters and return values.

Set =edebug-trace= to non-nil to enable this mode.

This is handy to find out a call path to the interesting place for investigation.

*** profiling
Profiling is used to figure out why the code is running slow and to find
critical places to optimize.

But, I find it also a convenient method to figure out a flow of control inside
of a piece of complex code I'm not familiar with. I just run the profiler and
then invoke a functionality I would like to investigate. After that, profiler
will give me a nice tree of calls so I will quickly be able to figure out what
functions are important and their dependencies.

/Is navigation to the exact location in the source code possible?/

To start the profiler run =profiler-start=. Then, invoke functionality that is
under inspection. After that run =profiler-report= to get the report. Don't forget
to run =profiler-stop= as the profiler introduces small run-time overhead.

*** References
- Emacs Info on Elisp - =SPC h i or M-x info= - follow =Elisp= and then =Debugging=.
** TODO Loading =ctypes= with an older =libffi= :python:linux:
The error I faced the other day when I tried to run a Python application I was
working on was:

#+begin_example
  File "/home/igor/.asdf/installs/python/3.8.4/lib/python3.8/ctypes/__init__.py", line 7, in <module>
    from _ctypes import Union, Structure, Array
ImportError: libffi.so.7: cannot open shared object file: No such file or directory
#+end_example

Python =ctypes= uses =libffi=. The version of Python required by the application was
older than system level Python (managed by [[https://asdf-vm.com/][asdf]]). The =libffi= required ABI was v7
while the system installed =libffi= was v8.

To solve the issue I did the following:

1. Download an older version of =libffi= from the [[https://wiki.archlinux.org/title/Arch_Linux_Archive][Arch Linux Archive]]:

   #+begin_src sh
   wget https://archive.archlinux.org/packages/l/libffi/libffi-3.3-4-x86_64.pkg.tar.zst
   wget https://archive.archlinux.org/packages/l/libffi/libffi-3.3-4-x86_64.pkg.tar.zst.sig
   # Check the signature
   pacman-key --verify libffi-3.3-4-x86_64.pkg.tar.zst.sig
   #+end_src

2. Unpack the library and put it in a user directory (e.g. =~/.local/lib=):

   #+begin_src sh
   # List file in the package
   tar -lf libffi-3.3-4-x86_64.pkg.tar.zst
   # Extract library to local lib directory
   mkdir -p ~/.local/lib/
   tar  -C ~/.local/lib/ --wildcards --xform='s#^.+/##x' -xvf libffi-3.3-4-x86_64.pkg.tar.zst 'usr/lib/libffi.so.*'
   #+end_src

   #+begin_note
    =--xform= takes a sed-like regex patter to transform target file name. In this
    case it will remove path info, thus flattening the extraction.
   #+end_note

3. Now, instruct dynamic library loader to first search into =~/.local/lib= when
resolving dynamic libraries. For this, an environment variable =LD_LIBRARY_PATH=
is used.

   #+begin_src sh
   LD_LIBRARY_PATH=~/.local/lib/ python <some_application>
   #+end_src

The required =libffi= library will be found and the =ctypes= will load correctly.

*Note:* These kind of problems are motivation for looking into functional package
managers like Guix and Nix.

** TODO Finding a library where symbol required by a binary is defined
:PROPERTIES:
:EXPORT_FILE_NAME: find-library-where-symbol-defined
:END:

Tools: nm, objdump, readelf

- [[https://en.wikipedia.org/wiki/Name_mangling][Name Mangling]]
- [[https://stackoverflow.com/questions/19916119/how-do-i-find-where-a-symbol-is-defined-among-static-libraries][How do I find where a symbol is defined among static libraries]]
- [[https://stackoverflow.com/questions/34732/how-do-i-list-the-symbols-in-a-so-file][How do I list the symbols in a .so file]]
- IBM [[https://developer.ibm.com/tutorials/l-dynamic-libraries/][Anatomy of Linux dynamic libraries]]
- [[https://www.technovelty.org/linux/plt-and-got-the-key-to-code-sharing-and-dynamic-libraries.html][PLT and GOT - the key to code sharing and dynamic libraries]]
- [[https://www.howtogeek.com/devops/how-to-use-ltrace-to-trace-library-calls/][ltrace usage]]

** DONE Debugging Qt plugins loading
The error I got when a Qt application is launched was:

#+begin_example
qt.qpa.plugin: Could not load the Qt platform plugin "xcb" in "/usr/lib/qt/plugins" even though it was found.
This application failed to start because no Qt platform plugin could be initialized. Reinstalling the application may fix this problem.
#+end_example

To get more information instruct Qt to provide debugging information during
plugin loading:

#+begin_src sh
export QT_DEBUG_PLUGINS=1
#+end_src

Now the error provides more context:

#+begin_example
Cannot load library /usr/lib/qt/plugins/platforms/libqxcb.so: (/usr/lib/libQt5XcbQpa.so.5: undefined symbol: _ZTI27QPlatformServiceColorPicker, version Qt_5_PRIVATE_API)
QLibraryPrivate::loadPlugin failed on "/usr/lib/qt/plugins/platforms/libqxcb.so" : "Cannot load library /usr/lib/qt/plugins/platforms/libqxcb.so: (/usr/lib/libQt5XcbQpa.so.5: undefined symbol: _ZTI27QPlatformServiceColorPicker, version Qt_5_PRIVATE_API)"
#+end_example

So library =libQt5XcbQpa.so.5= is trying to use symbol
=_ZTI27QPlatformServiceColorPicker= which is not found. Qt is implemented in C++
and the symbol name is obviously mangled so lets demangle:

#+begin_src sh
c++filt _ZTI27QPlatformServiceColorPicker
#+end_src

#+RESULTS:
: typeinfo for QPlatformServiceColorPicker

It's a reference to a class =QPlatformServiceColorPicker=. /How we can find a
library where this is defined?/


In addition, Qt has its own environment variable for plugins =QT_PLUGIN_PATH=. To
load plugins from different folder use:
#+begin_src sh
QT_PLUGIN_PATH=~/.local/lib/ <command>
#+end_src

Additional notes:
- To list all dynamic symbols from the library:
  #+begin_src sh
  nm -D <library>
  #+end_src
- To list undefined symbols (e.g. symbols required to be found in other
  libraries):
  #+begin_src sh
  nm -D -u <library>
  #+end_src


*** Old
As a bonus, in a similar fashion I solved error in loading Qt plugins by
downloading an older version of =qt-base= package and extracting plugins:

    #+begin_src sh
tar  -C ~/.local/lib/ --wildcards --xform='s#^.+/##x' -xvf qt5-base-5.15.1-3-x86_64.pkg.tar.zst '*libqxcb*' '*libQt5XcbQpa.so*'
    #+end_src

The error was:

#+begin_example
QLibraryPrivate::loadPlugin failed on "/usr/lib/qt/plugins/platforms/libqxcb.so" : "Cannot load library /usr/lib/qt/plugins/platforms/libqxcb.so: (/usr/lib/libQt5XcbQpa.so.5: undefined symbol: _ZTI27QPlatformServiceColorPicker, version Qt_5_PRIVATE_API)"
#+end_example

It was interesting that =libqxcb.so= wasn't compatible with the library from the
same =qt-base= package.

*** All the packages needed
For the record, here are all packages I needed for this to work. The process is
repetitive so it could be automated for the given date, and list of packages.

#+begin_src sh
# ffi
wget https://archive.archlinux.org/packages/l/libffi/libffi-3.3-4-x86_64.pkg.tar.zst
wget https://archive.archlinux.org/packages/l/libffi/libffi-3.3-4-x86_64.pkg.tar.zst.sig
pacman-key --verify libffi-3.3-4-x86_64.pkg.tar.zst.sig
tar  -C ~/.local/lib/ --wildcards --xform='s#^.+/##x' -xvf libffi-3.3-4-x86_64.pkg.tar.zst 'usr/lib/libffi.so.*'

# qt-base
wget https://archive.archlinux.org/packages/q/qt5-base/qt5-base-5.15.1-3-x86_64.pkg.tar.zst
wget https://archive.archlinux.org/packages/q/qt5-base/qt5-base-5.15.1-3-x86_64.pkg.tar.zst.sig
pacman-key --verify qt5-base-5.15.1-3-x86_64.pkg.tar.zst.sig
tar  -C ~/.local/lib/ --wildcards --xform='s#^.+/##x' -xvf qt5-base-5.15.1-3-x86_64.pkg.tar.zst '*libqxcb*' '*libQt5XcbQpa.so*'

# breeze theme
wget https://archive.archlinux.org/packages/b/breeze/breeze-5.16.90-1-x86_64.pkg.tar.xz
wget https://archive.archlinux.org/packages/b/breeze/breeze-5.16.90-1-x86_64.pkg.tar.xz.sig
pacman-key --verify breeze-5.16.90-1-x86_64.pkg.tar.xz.sig
tar  -C ~/.local/lib/ --wildcards --xform='s#^.+/##x' -xvf breeze-5.16.90-1-x86_64.pkg.tar.xz '*\.so*'

# qt5-quickcontrols2
wget https://archive.archlinux.org/packages/q/qt5-quickcontrols2/qt5-quickcontrols2-5.15.1-1-x86_64.pkg.tar.zst
wget https://archive.archlinux.org/packages/q/qt5-quickcontrols2/qt5-quickcontrols2-5.15.1-1-x86_64.pkg.tar.zst.sig
pacman-key --verify qt5-quickcontrols2-5.15.1-1-x86_64.pkg.tar.zst.sig
tar  -C ~/.local/lib/ --wildcards --xform='s#^.+/##x' -xvf qt5-quickcontrols2-5.15.1-1-x86_64.pkg.tar.zst '*\.so*'

#qt5-wayland
wget https://archive.archlinux.org/packages/q/qt5-wayland/qt5-wayland-5.15.1-1-x86_64.pkg.tar.zst
wget https://archive.archlinux.org/packages/q/qt5-wayland/qt5-wayland-5.15.1-1-x86_64.pkg.tar.zst.sig
pacman-key --verify qt5-wayland-5.15.1-1-x86_64.pkg.tar.zst.sig
tar  -C ~/.local/lib/ --wildcards --xform='s#^.+/##x' -xvf qt5-wayland-5.15.1-1-x86_64.pkg.tar.zst '*\.so*'

#kguiaddons
wget https://archive.archlinux.org/packages/k/kguiaddons/kguiaddons-5.68.0-1-x86_64.pkg.tar.zst
wget https://archive.archlinux.org/packages/k/kguiaddons/kguiaddons-5.68.0-1-x86_64.pkg.tar.zst.sig
pacman-key --verify kguiaddons-5.68.0-1-x86_64.pkg.tar.zst.sig
tar  -C ~/.local/lib/ --wildcards --xform='s#^.+/##x' -xvf kguiaddons-5.68.0-1-x86_64.pkg.tar.zst '*\.so*'
#+end_src
*** Fixing monaco client
#+begin_src
wget https://archive.archlinux.org/packages/q/qt5-base/qt5-base-5.14.2-3-x86_64.pkg.tar.zst
wget https://archive.archlinux.org/packages/q/qt5-base/qt5-base-5.14.2-3-x86_64.pkg.tar.zst.sig
pacman-key --verify qt5-base-5.14.2-3-x86_64.pkg.tar.zst.sig
tar  -C ~/.local/lib/ --wildcards --xform='s#^.+/##x' -xvf qt5-base-5.14.2-3-x86_64.pkg.tar.zst '*libqxcb*' '*libQt5XcbQpa.so*'
#+end_src
** TODO Developing project scaffolding for textX
** Slow Libre Office file opening :linux:
:PROPERTIES:
:EXPORT_DATE: 2015-10-10
:END:

If you are experiencing a several seconds delay while opening files with Libre
Office (Open Office might be affected to) it might be the same issue I run into
today.

It seems that during startup LO polls printers over [[https://wiki.archlinux.org/index.php/CUPS][CUPS daemon]]. If there is a
problem with the network and configured printers are not reachable you will
experience a several seconds delay with each file open. This will not affect
opening a file in the already running instance of LO.

The current workaround I use is to disable CUPS

#+begin_example
sudo systemctl stop org.cups.cupsd
sudo systemctl disable org.cups.cupsd
#+end_example

... and start it only when I plan to do some printing and the printers are
reachable:

#+begin_example
sudo systemctl start org.cups.cupsd
#+end_example
* Interviews
:PROPERTIES:
:EXPORT_FILE_NAME: interviews
:EXPORT_HUGO_SECTION: /
:EXPORT_HUGO_MENU: :menu main
:END:
- In this episode of [[https://www.pythonpodcast.com/][Python.__init__ podcast]] recorded on June 2020, I'm speaking
  with [[https://twitter.com/TobiasMacey][Tobias Macey]] about building DSLs and parsers in Python using [[http://textx.github.io/textX/][textX]].

  - [[https://www.pythonpodcast.com/textx-domain-specific-language-episode-269/][Build Your Own Domain Specific Language in Python With textX - Episode 269]]

- In this episode of [[https://beyondparsing.com/][Beyond Parsing podcast]] recorded on April 2020, I'm speaking
  with [[http://tomassetti.me/][Federico Tomassetti]] and [[https://specificlanguages.com/][Sergej Koščejev]] about my experiences in teaching
  DSLs, introducing DSLs into companies and the business values of DSLs.

  - [[https://beyondparsing.com/interview-with-igor-dejanovic/][Beyond Parsing: Interview with Igor Dejanović]]

* About
:PROPERTIES:
:EXPORT_FILE_NAME: about
:EXPORT_HUGO_SECTION: /
:EXPORT_HUGO_MENU: :menu main
:END:

#+ATTR_ORG: :width 300px
[[./images/igord.jpg]]

I work as a professor of Computer Science and Software Engineering at the
Faculty of technical sciences, University of Novi Sad.

When I was a kid I got struck by a passion for programming and computers in
general. That passion never left me.

Nowadays I am particularly interested in Domain-Specific Languages and
Model-Driven Engineering. I strongly believe that the future of programming is
in languages fit for the purpose, with both abstract and concrete syntaxes fully
aligned with the domain. I always strive for simplicity - simple tools, simple
processes.

I am user, supporter, and developer of Free/Libre Open-Source Software. Some of
my FLOSS projects are described [[#projects][here]]. Check it out at [[https://github.com/igordejanovic][github]].

Some of my research is listed at [[http://informatika.ftn.uns.ac.rs/IgorDejanovic/][my university page]].

To contact me follow social links/icons on the left.

** OpenPGP info
:PROPERTIES:
:CUSTOM_ID: openpgp-info
:END:
Key ID: [[http://pgp.mit.edu/pks/lookup?search=0x40E22A6D&op=index&exact=on][0x40E22A6D]]

Fingerprint: 0481 C23F 822A 62D0 A755 51EC A508 E264 40E2 2A6D

#+begin_example
-----BEGIN PGP PUBLIC KEY BLOCK-----

mQENBFfabjsBCADdJiIulepY6rffXr2A2DGP9W3sMhpxuk76gVArI4ifIexZEA/B
so+36aAzKmTPJFKlkJd2O4ScY5EEQT7X9dWtOIYw3nVqD9nePLTVI7DYV/vSJk0s
Kq0qLhduOga4CdFq7ypeoELIfNdrUWdSP7xCZzBkuoReF4r8IXpxemzBhL75nTJv
oVM+JGlW5aQrXpD7N7+9Krx7PHXejKec2O+bwamKDK0JQWbmnl60XHFQxtl3tzUM
bXuYK/S29u22udA4ReNuI60xgrzcNqutE+oC8AN967bH8Y2rcLzj6IfJFreOVKD8
IxwDSLaoui62zBfc8svIxQ5BZUBWXUmWtrE1ABEBAAG0KUlnb3IgRGVqYW5vdmlj
IDxpZ29yLmRlamFub3ZpY0BnbWFpbC5jb20+iQE3BBMBCAAhBQJX2m47AhsDBQsJ
CAcCBhUICQoLAgQWAgMBAh4BAheAAAoJEKUI4mRA4iptiRUH/3MG5FJSNWB1WUf1
GuqpofWjaResTnqBXrfgWYO4RE4Zlq7658YoV8KopoawQ9gRpunzFwt54h9eyXJ2
rS7rKmSnuxT8++XS0hJUVCETVItuGuZO2o5aKE0viVgLwujQtQnfcSKFe2vgoNNJ
bW4gq99qq5HEi0O7ur3GEnMH09oPuK4JmXMgccYuJ5typIbL5I9IRC3EO1c/VsCH
b/9V/hV4ClhDInlT3Oqd+D5YK3OG7e6JXEUeTpGidr/ZYZ/UAjiJ6yj1JjUm7F25
PZ386aeNYHJdA3k3gnIel8Nu7eVCfpdFqVLO9ASwWHvAOqBZOxjtDM3wGJq5433j
hiInk1m5AQ0EV9puOwEIAOrpbLKuTFbUbKBjqnIdIFO57FD/3URuGw7sMtjGrNJd
WrTDYtGBhNJtmp+i8Ia6EwnLVOHEkteQ9j+LiFr33/X3IpLUkYGW8GzHjin9+uWF
pMzzqj/NQ/Ut927bYtEquwrlPAI7vLmQnlEZx4Oi5MwgsUH3DXsKXE2XS4fmLXwz
NuMM54ioL+ZzTns3T3ay+qXh/yNHQ/aKxo4CURjEHShEzJx8I5GdyRmRTXiVIfKf
HBVPPR26ibDSfY9mQiVEN1fcxQjNYZLbuBf31JjODMPkqqgoWe/gZ04wMZB3vz0V
/WP+f2HnYKL1+XNan2d+bJzju60+YYOD92qToGV5yKsAEQEAAYkBHwQYAQgACQUC
V9puOwIbDAAKCRClCOJkQOIqbTJgB/4kok0mmGwf0YDNTC9uO0BrtOAng9mMTU2B
S2OenYpfNkzMptQdwpuNDsGWTt+IeFYBu8IpVkDebhCBlGpQAPZY/CHQvT5UgmqZ
Nmkjqt4uWU956vVhQq3fIH4ZoQ81zSDD8W+ZkM1DD7pmMTvuirJ7p3/DkyKtb55U
HJxwFQKoHsIoQinje35Hy+lToN7rflD0d6DXwfR/9W6rKu+QWVBYQ5+BaSMft9OL
p7IzcuMDOEB1b3Nfw+9T/o/ybcpfsT25sspyZ3cXiH1NQ5GQHBVmEMEltDtE7ETT
v5xBR3eULRG/s5YufU84oAZ4Xf1DEFrF/kcVw4VEfK8/LY/+vvBm
=frLo
-----END PGP PUBLIC KEY BLOCK-----
#+end_example
* All Posts
:PROPERTIES:
:EXPORT_HUGO_SECTION: posts
:EXPORT_HUGO_TYPE: post
:EXPORT_HUGO_AUTO_SET_LASTMOD: t
:EXPORT_HUGO_FRONT_MATTER_KEY_REPLACE: tags>ptags
:END:
** DONE Deploying Hugo site on GitHub Pages :github:hugo:
CLOSED: [2023-01-04 Wed 19:53]
:PROPERTIES:
:EXPORT_FILE_NAME: deploying-hugo-site-on-github-pages
:END:
There is an excellent [[https://github.com/benmatselby/hugo-deploy-gh-pages][GitHub Action to build and deploy a Hugo site to GitHub
Pages]] by [[https://github.com/benmatselby][Ben Selby]].

But, the problem is that the action requires [[https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token][Personal Access Token]] to operate
which currently require classic token with a full access to all user repo. I'm
not comfortable with that.

Another issue, it seems that it is created to deploy to another git repo as it
nukes the target and retain only a single commit.

I will here describe a less intrusive way to post hugo site using GitHub Pages.
For this I created a
[[https://github.com/igordejanovic/hugo-deploy-gh-pages][modified version of
Ben's action]] just by removing all git related publishing code. The action now
merely downloads appropriate version of Hugo and do the build. The actual deploy
is handled by official GitHub actions.

Workflow script is in most part generated by going to =Settings->Pages= and
choosing =GitHub Actions= as source. There you have option to use Jekyll or deploy
static pages produced by other static site builder. Choose the later and you
will get the workflow config. There I just inserted a call to modified hugo
builder. As of this writing you will get a workflow similar to this:

#+begin_src yaml
# Simple workflow for deploying static content to GitHub Pages
name: Deploy static content to Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow one concurrent deployment
concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  # Single deploy job since we're just deploying
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: true
      - name: Setup Pages
        uses: actions/configure-pages@v2
      - name: Hugo Deploy GitHub Pages
        uses: igordejanovic/hugo-deploy-gh-pages@main
        env:
          HUGO_VERSION: 0.105.0
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v1
        with:
          path: 'public'
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v1
#+end_src

Save this in =.github/workflow/build-site.yaml= in your Hugo git repo.

What this does is
1. Checkout the source of the site.
2. Do the setup.
3. Call Hugo builder action which downloads Hugo and build the static pages.
4. Upload =public= folder as a build artifact.
5. Deploy uploaded artifact as a new site.

This will keep site repo clean. No deployment branches (like =gh-pages=), no
=public= folder with built static pages etc. And, no need to setup and take care
of Private Access Tokens.

** TODO Playing with Guix :linux:
** TODO Migrating personal site to Org/Hugo :emacs:
:PROPERTIES:
:EXPORT_DATE: 2022-12-28
:EXPORT_FILE_NAME: migrating-personal-site-to-org-hugo
:END:
** Parglare Python parser :programming:python:
:PROPERTIES:
:EXPORT_DATE: 2017-08-09
:EXPORT_FILE_NAME: parglare-python-parser
:END:

With this post I'm announcing availability of [[https://github.com/igordejanovic/parglare][a new Python parser]] based on LR(1)
and GLR algorithms.

For years I've been working with and developing [[https://en.wikipedia.org/wiki/Parsing_expression_grammar][PEG]] based parsers (see [[https://github.com/igordejanovic/Arpeggio][Arpeggio]]
and [[https://github.com/igordejanovic/textX][textX]]). PEGs have some really nice properties: they represent a concise
description of top-down parsers and are easy to understand and debug.
Furthermore, with choice operator being ordered PEG grammars can't be ambiguous.
Backtracking is natural and easy to implement giving it unlimited lookahead. A
composition of PEG grammars will give a valid PEG grammar, although it [[http://tratt.net/laurie/blog/entries/parsing_the_solved_problem_that_isnt.html][might not
be what you would expect]].

But, there are some drawbacks.

*** PEG drawbacks
First, PEG based parser are naturally implemented as top-down parsers which is
troublesome for left-recursive grammar rules. This leads to unnatural grammar
specification for some languages which would be much easier to describe using
left recursion.

Second, PEG parsers deal with ambiguity by implicitly resolving it with
left-to-right ordered choice operator. This hides ambiguity and forces you to
think imperatively during grammar construction. There are even situations when
there exists no valid order of the rules for the language one wish to describe.
This leads to a problem where you can't be sure what language your grammar
describes.

Third, the most straight-forward way to implement PEG parser is by mutually
recursive function calls. Parser state is thus kept on the program stack which
is not easy to manipulate. This makes error recovery hard to implement. In order
to recover from an error you would have to restore the state where you consumed
the most of the input and try to skip erroneous input or create expected tokens.
Recovering that state would mean to recover the program stack. Another technique
would be to implement explicit stack but that would kill much of the PEG
attractiveness.

*** Parglare
With parglare I wanted to keep most of the good stuff from Arpeggio/textX but to
use more robust algorithm with a solid scientific theory and to alleviate some
of the PEG's drawbacks.

LR parsing is invented by Donald Knuth in 1965. It is based on Context-Free
Grammars and Push-Down Automata (PDA) construction process which if successful
proves that the grammar is indeed LR(1) and that any input that correspond to
the grammar can be parsed deterministically.

I wanted parglare to be a scannerless parser. Separate tokenization/scanning
phase leads to a lot of grief. Parglare will recognize tokens on the fly and
given the right parsing context this eliminates a lot of potential source of
lexical ambiguities.

Parsing is a process of transforming a flat sequence of tokens to some other
form, tree being a most common. This doesn't imply that the input must be text
at all. It can be sequence of any objects. Parglare indeed can parse anything by
introducing the concept of [[http://www.igordejanovic.net/parglare/recognizers/][recognizers]]. You can also see in [[https://github.com/igordejanovic/parglare/blob/master/tests/func/test_parse_list_of_objects.py][this test]] how a list
of integer is being parsed.

Both Arpeggio and textX provide a handy visualization features which can really
help in understanding the grammar and parsing process. Parglare also provides
[[http://www.igordejanovic.net/parglare/pglr/][pglr command]] which can be used to visualize LR automata and GLR parsing trace.

[[http://www.igordejanovic.net/parglare/grammar/][Grammar language]] is based on a pure BNF without any extensions at the moment.
This might lead to a more verbose grammar but the actions are really
straight-forward to write. In the future a syntactic sugar will be added for
some common idioms.

[[http://www.igordejanovic.net/parglare/actions/][Actions]] can be called on-the-fly during parsing or applied on the parser tree
afterwards. The parse tree is built using default actions. Calling actions on
the fly is again something that can hardly be done with PEG parsers because of
backtracking.

[[http://www.igordejanovic.net/parglare/recovery/][Error recovery]] was much easier to implement as the parser state is explicit. In
parglare you can use built-in error recovery strategy or write your own.

From the same grammar Parglare can construct both LR(1) (modified LALR(1), or
SLR tables) and GLR parser. GLR could be used if the parser needs more than one
token of lookahead to deduce next step or if the language is inherently
ambiguous. In case of ambiguous parse, all trees will be returned by the GLR
parser (a.k.a. the parse forest). Common sub-tree sharing is used which reduce
memory usage significantly. Some common pitfalls with GLR algorithm are taken
care of which is [[https://github.com/igordejanovic/parglare/blob/master/tests/func/test_special_grammars.py][tested using published grammars]] that are specifically crafted
to confuse GLR parser.

Describing everything that can be done with parglare would make this post too
long, so if I've got you interested, you can find more info in [[http://www.igordejanovic.net/parglare/][the docs]].

*** Where is it heading?
There are a lot of plans for parglare. First I would like to build some optional
syntactic sugar for grammar language that would reduce boiler-plate for some
common idioms. I'm also thinking about providing some implicit transformation to
AST similar to textX. Lexical ambiguity detection for overlapping regexes would
be nice too. And, of course, performance optimization is something that needs to
be tackled from time to time.

But I'll definitely try to keep the core simple and all additions optional.

If you have ideas, advices or any other feedback please use [[https://github.com/igordejanovic/parglare/discussions][the discussion
section on GitHub]].


** My Spacemacs Odyssey :emacs:
:PROPERTIES:
:EXPORT_DATE: 2016-11-08
:EXPORT_FILE_NAME: my-spacemacs-odyssey
:END:
I'm a long time vim user and I just love vim modal editing approach. But, I
always admired Emacs extensibity, introspection and self-documenting
capabilities. Although I gave Emacs a try couple of times in the past I just
couldn't get used to non-modal editing and cumbersome finger-stretching keyboard
bindings. For some time I was keeping an eye on [[http://spacemacs.org/][spacemacs]], emacs distribution
geared towards vim users. It looked like a perfect blend of vim and emacs so I
gave it a try.

Although spacemacs is still beta the switch-over was surprisingly smooth. It
took me just a few days to get to the speed thanks to [[https://www.emacswiki.org/emacs/Evil][Evil mode]], a vim-like
modal editing support which is enabled by default in spacemacs. Evil works
remarkably good, even some often used plugins are ported like, for example,
[[https://github.com/tpope/vim-surround][surround]].

First impression are default settings which are most of the time just what I
want. Configuration is done in =.spacemacs= file which is well organized and
commented. Much of the functionality is accessible using key combination
starting with space bar (hence the name of the distribution) followed by a
letter which is easy to remember most of the time (=SPC b= - for buffer actions,
=SPC f= - for file actions, =SPC p= - for project actions etc.). If you don't know
the right key that proceeds a helpful popup is displayed with the keys that can
be tried next (thanks to [[https://github.com/justbur/emacs-which-key][which-key]]). You can easily ask emacs to describe
keybindings, key, package, function (=SPC d= and than =b= for bindings, =k= for keys,
=p= for package, =f= for function, =v= for variable, =m= for mode). Help on anything is
triggered with =SPC F1=. In all cases a fuzzy searchable list is displayed thanks
to [[https://github.com/emacs-helm/helm][helm]] package (Emacs incremental completion and selection narrowing
framework).

You can quickly toggle some settings using =SPC t= prefix and than appropriate
letter. For example to turn on/off indent guide use =SPC t i=. To directly call
emacs lisp function use =M-x= and than type the part of the name.

Of course, configuration, keybindings, moving around and editing is just a part
of the story. We all depend heavily on various plugins and extensions that makes
our life easier. Here are some comments on few of them.

*** Helm
[[https://github.com/emacs-helm/helm][Helm]] is emacs incremental completion and selection narrowing framework. It is
integrated with most packages that provides a list to select from. I was very
impressed by a [[https://www.emacswiki.org/emacs/HelmSwoop][helm-swoop]] functionality which I use most of the time now to
search inside the buffer.

The functionality similar to this can be achieved in vim using [[https://github.com/Shougo/unite.vim][unite]] but helm
feels more powerful and better integrated with the rest of the editor.

*** Magit
For git in vim I used [[https://github.com/tpope/vim-fugitive][fugitive]] which is great. In emacs a standard package is
[[https://github.com/magit/magit][Magit]]. I find Magit to be as capable as fugitive or even more with a much easier
to learn interface. Keybindings are easier to grasp and the way of work is just
more logical. For fugitive It took me quite some time to get to the speed.

To call magit status use =SPC g s= or to call magit menu =SPC g m=. =SPC g= is prefix
for some of the more frequently used Magit commands. Check out blame mode, it is
really nice =SPC g b=.

*** flycheck
Flycheck is syntax checker for emacs. I didn't have to do much to have it
working. It /just works/. For various programming languages you have to install
external tools. Check the docs.

*** Yasnippet
In vim I used [[https://github.com/SirVer/ultisnips][Ultisnips]] plugin for snippets. In spacemacs the default is
[[https://github.com/joaotavora/yasnippet][yasnippet]]. Yasnippet provides you what you would expect from a capable
snippet/template engine. You can create new snippet by calling =yas-new-snippet=
function. In the snippet buffer you can test the snippet =C-c C-t= and save it
with =C-c C-c= when you are satisfied with the result. Nice feature of yasnippet
is that you can use any emacs lisp expression on entered text which gives you
great flexibility on what can be done with the engine. Ultisnips use Python for
similar feature.

*** Org mode
And last but not least is [[http://orgmode.org/][Org mode]]. If there is one package that is worth using
emacs for it's this one. I could say that it blew my mind and changed the way I
work. I knew for this gem a long time ago and actually used [[https://github.com/jceb/vim-orgmode][its vim clone]] but
emacs Org mode is just fantastic. This tool let you organize all your notes,
todos, schedules in hierarchical structure in plain text files while giving you
agenda and todo list overview over all files. It provides you with time tracking
and pomodoro technique all in the same context. It let you work with tables
seamlessly just as you would edit actual spreadsheet. It really facilitates [[http://gettingthingsdone.com/][GTD]]
very well. Now I do all my work organization, note-taking activities and
time-tracking in a set of Org mode files.

*** Final thoughts
All in all, this was a pleasant experience for me. After a two weeks of using
spacemacs I can say that I feel fully productive and the journey has just begun.
I still get impressed by spac(emacs) features every day. Although still in beta
it is really well thought-out distribution with a nice configuration and set of
defaults and packages.

Furthermore, default Evil mode gives me opportunity to nurture and don't forget
my vim-fu.
** Implementing Martin Fowler's state machine DSL in textX :dsl:textX:
:PROPERTIES:
:EXPORT_FILE_NAME: implementing-martin-fowler-state-machine-dsl-in-textx
:EXPORT_DATE: 2016-05-06
:END:

Well, you know what they say:

#+begin_quote
You aren't making a DSL tool if you haven't
implemented [[http://www.martinfowler.com/aboutMe.html][Martin Fowler's]] State Machine language using your tool yet ;)
#+end_quote


This is a well known DSL example from his book [[http://www.martinfowler.com/books/dsl.html][Domain-Specific Languages]]. If you
are doing stuff in the field of DSLs you should definitely read this book. There
is an [[http://www.informit.com/articles/article.aspx?p=1592379&seqNum=1][excerpt from the book]] available on-line so I advise you to read it before
watching the video below.

Another book which I also highly recommend is [[http://dslbook.org/][DSL Engineering: Designing,
Implementing and Using Domain-Specific Languages]] by [[http://voelter.de/about][Markus Völter]]. Also an
excelent read, although oriented more towards modeling languages with graphical
syntaxes (a.k.a. Domain-Specific Modeling), is the book [[http://dsmbook.com/][Domain-Specific
Modeling: Enabling Full Code Generation]] by [[http://www.metacase.com/stevek.html][Steven Kelly]] and [[http://www.metacase.com/jpt.html][Juha-Pekka
Tolvanen]].

In the video bellow I am explaining the implementation of the Martin Fowler's
State Machine language in [[https://github.com/igordejanovic/textX/][textX]] by:

- Specifying the grammar of the language
- Creating source code generator by generating a nice /dot/ state charts
- Creating model interpreter in Python

This tutorial is a good overview of textX workflow and capabilities but if you
want to see basic introduction together with installation and the first steps I
suggest you to watch [[http://igordejanovic.net/2016/05/04/video-introduction-to-textx/][video introduction to textX]] first.

Full source code presented in the video is available at [[https://github.com/igordejanovic/textX/tree/master/examples/StateMachine][the project GitHub
repository]]. I hope you will enjoy watching this video as much I enjoyed
playing with this little language.

#+md: {{< youtube HI14jk0JIR0 >}}

** Video introduction to textX :dsl:textX:
:PROPERTIES:
:EXPORT_DATE: 2016-05-04
:EXPORT_FILE_NAME: video-introduction-to-textx
:END:

Finally got some time to record first video for [[http://igordejanovic.net/textX/][textX]]. In this video I will show
you how to install textX and do some first steps. This is my first video
tutorial so please bear with me ;)

#+md: {{< youtube CN2IVtInapo >}}
