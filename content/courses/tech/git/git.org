#+TITLE: Git DVCS
#+EXPORT_FILE_NAME: index.html
#+SETUPFILE: ../../courses-startup.org

* Sadržaj
  :PROPERTIES:
  :UNNUMBERED: notoc
  :END:
  #+REVEAL_TOC: headlines 1

* Uvod u Git
** Šta je Git?
            
 - Distribuirani sistem za kontrolu verzija (/Distributed Version Control System -
   DVCS/).
 - Razvoj započeo Linus Torvalds, u aprilu 2005. godine, posle promene politike
   licenciranja BitKeeper-a koji je do tada korišćen za razvoj linux kernela.
   Dostupan na adresi http://git-scm.com/
            
** Git - osobine
            
 - Izuzetno brz i skalabilan.
 - Jednostavan dizajn.
 - Većina operacija su lokalne prirode.
 - Odlična podrška za nelinearan razvoj (podrška za veliki broj grana) i velike
   projekte (npr. Linux kernel).
 - Pisan najvećim delom u C-u, ali su delovi pisani u Perl-u, bash-u itd.
 - Komande niskog nivoa (/plumbing/). Komande visokog nivoa (/porcelain/).
 - Ne prati fajlove već sadržaj. Izmene se eksplicitno dodaju pre /commit/-a.
 - Kriptografska autentikacija istorije promena.
            
** Osnovni workflow

 - Ako ne postoji klon repozitorijuma na lokalnom računaru vrši se kloniranje
   udaljenog repozitorijuma (ovo se generalno radi jednom).
 - Menjaju se fajlovi.
 - Izmene se dodaju u pripremnu zonu (indeks).
 - Vrši se trajno beleženje promene (operacija /commit/).

* Git repozitorijum
** Praćenje sadržaja

 Osnova git repozitorijuma je praćenje sadržaja a ne fajlova i promena nad njima.
 Informacije o promenama se izračunavaju po potrebi.

 #+BEGIN_QUOTE
 I’m right. I’m always right, but sometimes I’m more right than
 other times. And dammit, when I say "files don’t matter", I’m
 really really Right(tm).ref[1].
 #+END_QUOTE

 #+attr_html: :class footer :style clear: both;
 - Linus Torvalds, [[http://article.gmane.org/gmane.comp.version-control.git/217][prepiska na mailing listi]]

** Veza radnog stabla, indeksa i repozitorijuma
  
 #+ATTR_ORG: :width 300px
 [[./images/Workflow.svg]]

** Životni ciklus fajla u git repozitorijumu
  
 #+ATTR_ORG: :width 300px
 [[./images/FileLifecycle.svg]]

** Git repozitorijum

 - /Objektna baza/: Jednostavan model repozitorijuma baziran na mapama (parovi
   ključ-vrednost).
 - Ključevi su /SHA1 heš sadržaja/ koji se čuva + hedera.
 - /Tri vrste objekata/vrednosti/. Sadržaj se komprimuje pomoću *zlib* biblioteke.
 - Reference - /pokazivači/ na određene objekte u repozitorijumu.
 - Repozitorijum se nalazi u =.git= direktorijumu unutar direktorijuma gde je
   izvršena inicijalizacija sa =git init= komandom (videti u nastavku).

** Git repozitorijum sa objektima i referencama

 #+ATTR_ORG: :width 300px
 [[./images/git-repo.svg]]

** Prikaz popularnih hosting rešenja

 - https://github.com/
 - https://gitlab.com/

* Instalacija i konfiguracija
** Vrste klijenata

 - GUI
   - FLOSS: EGit (Eclipse plugin), git-cola, TortoiseGit, Git Extensions...
   - Komercijalni: SmartGit

 - Command line - kanonički git klijent

** Pomoć - help

Spisak osnovnih komandi git-a se može dobiti sa:
 
#+BEGIN_SRC
$ git help
usage: git [–version] ...
...
The most commonly used git commands are:
add       Add file contents to the index
bisect    Find by binary search the change that introduced a bug
branch    List, create, or delete branches
checkout  Checkout a branch or paths to the working tree
...
#+END_SRC

Detaljna pomoć za komandu se dobija sa:

#+BEGIN_SRC
$ git help <ime komande>
#+END_SRC

** Konfiguracija

- Konfiguracija se čuva u tekstualnim fajlovima koji imaju strukturu /.ini
  fajlova/.
- Preporučivo je parametre podešavati putem =git config= komande.
- Tri nivoa konfiguracije:
  - /sistemska/ (za sve korisnike instalacije) - fajl =/etc/gitconfig=
  - /po korisniku/ (važi za ulogovanog korisnika) - fajl =~/.gitconfig= (POSIX)
    ili =C:\Documents and Settings\$USER\.gitconfig= (Windows)
  - /po repozitorijumu/ (važi za tekući repozitorijum) - fajl =.git/config=
    unutar repozitorijuma
  
** Osnovna konfiguracija

Konfigurisanje imena i email-a:

#+BEGIN_SRC
$ git config --global user.name "Igor Dejanović"
$ git config --global user.email "igor DOT dejanovic AT gmail DOT com"
#+END_SRC

Konfiguracija se može izlistati sa:

#+BEGIN_SRC
$ git config --list
#+END_SRC

Editor za unos log poruka je postavljen na podrazumevani sistemski (najčešće
=vi= ili =vim=). Windows korisnici uglavnom nisu vični upotrebi ovog editora.

Podrazumevani editor se na windowsu može promeniti na sledeći način:

#+BEGIN_SRC sh
# Windows - Obratiti pažnju na duple navodnike!!!
$ git config --global core.editor "'C:/Program Files/Windows NT/Accessories/wordpad.exe'"
#+END_SRC

** Konfiguracija za SSL i proxy

Za pristup serverima sa nevalidnim sertifikatom (npr. samopotpisan sertifikat)
potrebno je podesiti sledeće za sertifikat koji smo preuzeli sa servera:

#+BEGIN_SRC
$ git config --global http.sslCAInfo /home/igor/config/all-certs.crt
#+END_SRC

ili ukoliko ne želimo proveru sertifikata:

#+BEGIN_SRC
$ git config --global http.sslVerify false
#+END_SRC

Ako je potreban pristup preko HTTP proxy-ja to se po korisniku može podesiti sa:

#+BEGIN_SRC
$ git config --global http.proxy 192.168.77.100:8080
#+END_SRC

** Povezivanje sa serverom upotrebom SSH ključeva

            
- Ključevi se nalaze u =~/.ssh/= direktorijumu.
- Generišu se sa komandom:

#+BEGIN_SRC
$ ssh-keygen -t rsa -b 4096 -C "your_email@example.com"
Generating public/private rsa key pair.
Enter file in which to save the key (/Users/you/.ssh/id_rsa): [Press enter]
Enter passphrase (empty for no passphrase): [Type a passphrase]
Enter same passphrase again: [Type passphrase again]
Your identification has been saved in /Users/you/.ssh/id_rsa.
Your public key has been saved in /Users/you/.ssh/id_rsa.pub.
The key fingerprint is:
01:0f:f4:3b:ca:85:d6:17:a1:7d:f0:68:9d:f0:a2:db your_email@example.com
#+END_SRC

#+attr_html: :class footer :style clear: both;
[[https://help.github.com/articles/generating-ssh-keys/][GitHub: Generating SSH keys]]

** Konfigurisanje diff/merge alata

#+BEGIN_SRC
$ git config --global merge.tool meld
#+END_SRC

Ili na windows-u:

#+BEGIN_SRC
$ git config --global merge.tool "'C:\ Program Files\...'"
#+END_SRC

Da bi se izbeglo pitanje da li želite da pokrenete diff alat:
#+begin_src
$ git config --global --add difftool.prompt false
#+end_src

** Konfiguracija veličine slova u nazivima fajlova

Unix fajl sistemi su uglavnom /case-sensitive/ dok kod *windows*-a to nije
slučaj. Stoga je na unix file sistemima sasvim legalno da postoje dva fajla
istog naziva ali različite veličine slova (na primer =File1.txt= i =file1.txt=).
Ovo na /windows/-u nije moguće pa je dobro, ukoliko članovi tima rade na
različitim operativnim sistemima, podesiti sledeće:

#+BEGIN_SRC
$ git config --global core.ignorecase true
#+END_SRC

Na taj način će git tretirati fajlove različitog /case/-a kao identične i
ukoliko se kreira fajl istog naziva kao postojeći u repozitorijumu ali
različitog /case/-a on će biti ignorisan.

** Konfiguracija završetaka linija (/line endings/)

Unix na kraju reda kod tekstualnih fajlova koristi LF bajt. Windows koristi dva
bajta - CR i LF. Današnji editori su u stanju da rade sa oba standarda. Git
podržava automatsku konverziju krajeva linija. Tekuća praksa je da se kreira
konfiguracioni fajl =.gitattributes= u korenskom folderu u kome se "pomaže"
git-u da pravilno odredi tekstualne i binarne fajlove. Ovaj fajl se /commit/-uje
u repozitorijum tako da svi članovi tima imaju isto podešavanje. Sadržaj
=.gitattributes= fajla:

#+BEGIN_SRC
  * text=auto
  *.png binary
  *.jpg binary
  *.exe binary
#+END_SRC

#+ATTR_HTML: :class attention
*Napomena*: Za dodatnu konfiguraciju pogledati konfiguracione parametre
=core.eol=, =core.autocrlf= i =core.safecrlf=.

** Normalizacija krajeva linija u repozitorijumu

Ako se u git repozitorijumu već nalaze fajlovi sa CRLF tada je potrebno izvršiti
normalizaciju svih tekstualnih fajlova na LF pratite [[https://help.github.com/articles/dealing-with-line-endings/][uputstvo sa GitHub-a]].

* Osnovne operacije
** Inicijalizacija repozitorijuma

Repozitorijum je skup metapodataka koji se nalaze u skrivenom folderu =.git=
unutar korenskog foldera projekta.

Kreiranje se obavlja na sledeći način:

#+BEGIN_SRC sh
# Prelazak u folder gde se nalazi izvorni kod
# projekta
$ cd ~/Projekat

# Inicijalizacija
$ git init
Initialized empty Git repository in
/home/igor/Projekat/.git/
#+END_SRC

Ovim je kreiran prazan repozitorijum. Sledeći korak je dodavanje sadržaja.

** Kloniranje repozitorijuma

Repozitorijum možemo kreirati kloniranjem udaljenog repozitorijuma.

#+BEGIN_SRC
$ git clone https://puppet.ftn.uns.ac.rs/rks/tim1/git RKSProjekat
#+END_SRC

Ili na primer ako se podigne lokalni server sa =git daemon= (videti sekciju
[[*Razmena promena][Razmena promena]]).

#+BEGIN_SRC
$ git clone git://192.168.100.50/ mojProjekat
#+END_SRC

gde je =192.168...= IP adresa računara na kojem je daemon pokrenut

** Ignorisanje fajlova

Obavlja se putem fajla =.gitignore= koji se nalazi u korenskom folderu projekta.
Sadržaj je sledećeg oblika:

#+BEGIN_SRC
# Ovo je komentar.
# Ignorišemo sve privremene fajlove
*.tmp
*~
*.class
/docs/*.html
# Ignorisemo sve .html fajlove u docs i poddirektorijumima
/docs/**/*.html
# Ali ne ignorisemo rucno pisanu dokumentaciju
!/docs/manual/*.html
#+END_SRC

=.gitignore= fajl se može kreirati i u poddirektorijumima i u tom slučaju važi
samo za dati poddirektorijum.

** Status repozitorijuma

Status predstavlja informacije kao što su:
- Grana na kojoj se nalazi radno stablo.
- Koji fajlovi su novi, nisu ignorisani i nisu spremni za dodavanje.
- Koji fajlovi/sadržaji su spremni za dodavanje.

** Status repozitorijuma

Na primer, za repozitorijum koji ima lokalnih promena

#+BEGIN_SRC sh
$ git status
# On branch master
# Changes not staged for commit:
# (use "git add <file>..." to update what will be committed)
# (use "git checkout – <file>..." to discard changes in working directory)
#
# modified: fajl2.txt
#
# Untracked files:
# (use "git add <file>..." to include in what will be committed)
#
# file1.txt
# no changes added to commit (use "git add" and/or "git commit -a")
#+END_SRC

- Radno stablo je na grani master (osnovna grana u git repozitorijumu – videti u
  nastavku).
- =fajl2.txt= je izmenjen ali nije pripremljen za dodavanje dok je =file1.txt=
  novi fajl koji se trenutno ne prati.

** Priprema index-a

Priprema sadržaja za /commit/ se obavlja operacijama =add=, =rm= i sl.
 
#+BEGIN_SRC sh
# Dodavanje sadržaja
$ git add MojaKlasa.java
$ git add .

# Interaktivno dodavanje sadržaja
$ git add -p .

# Dodavanje/uklanjanje svih novih/modifikovanih/obrisanih fajlo
$ git add -A .

# Uklanjanje iz radnog stabla i indeksa.
$ git rm MojaKlasa.java

# Uklanjanje iz indeksa uz brisanje iz repozitorijuma.
# Fajl ostaje u radnom stablu ali se više ne prati.
$ git rm --cached MojaKlasa.java

# Uklanjanje promena zabeleženih u indeksu
$ git reset HEAD ili samo git reset

# Uklanjanje zabeleženih promena nad fajlom iz indeksa
$ git reset HEAD <putanja do fajla>
#+END_SRC

Promene se beleže u index-u.
 
** Napomena za inicijalni /commit/

Pri inicijalnom /commit/-u repozitorijum je prazan pa =HEAD= pokazivač ne
postoji. Zbog toga nije moguće poništiti indeks komandom =git reset HEAD= pa se
u tom slučaju radi:

#+BEGIN_SRC
$ git rm –r --cached .
#+END_SRC

#+ATTR_HTML: :class attention
*Napomena*: ovo se radi samo kod inicijalnog *commit*-a. Nemojte ovo raditi
kasnije! Ova komanda registruje promenu koja će obrisati sve fajlove (rekurzivno
– flag =–r=) u sledećoj verziji.

** Odustajanje od praćenja fajla
   
- U komandama tipa =git add -A= i =git commit -a= git automatski dodaje promene
  za fajlove koji se prate.
- Ukoliko je potrebno odustati od praćenja fajla a zadržati fajl u radnom stablu
  to se može uraditi na sledeći način:

  #+BEGIN_SRC
  $ git rm --cached MojaKlasa.java
  #+END_SRC

  Problem sa ovim pristupom je što će fajl biti obrisan u udaljenom
  repozitorijumu.

- Ukoliko želimo da se fajl ne prati ali da ostane u svim repozitorijumima
  potrebno ga je obeležiti kao takvog sa:

  #+BEGIN_SRC
  $ git update-index --assume-unchanged MojaKlasa.java
  #+END_SRC

  Kada želimo opet da pratimo fajl radimo:

  #+BEGIN_SRC
  $ git update-index --no-assume-unchanged MojaKlasa.java
  #+END_SRC
  
** Trajno beleženje - /commit/

- Promena se trajno beleži sa:

  #+BEGIN_SRC
  $ git commit
  #+END_SRC

  Potrebno je zatim uneti log poruku. Preporuka je da se u prvom redu unese
  skraćena verzija, ostavi prazan red, a zatim unese duža verzija poruke.

- Ukoliko indeks nije pripremljen može se koristiti prečica:

  #+BEGIN_SRC
  $ git commit -a
  #+END_SRC

  Koja pre commit-a smešta u indeks sve modifikovane/obrisane fajlove. Novi
  fajlovi ne ulaze u indeks.

** Pregled istorije

- Istorija se može pregledati sa komandom:

  #+BEGIN_SRC
  $ git log
  #+END_SRC

- Grafički pregled istorije se dobija sa

  #+BEGIN_SRC
  $ gitk
  #+END_SRC

  za tekuću granu, ili
  
  #+BEGIN_SRC
  $ gitk --all
  #+END_SRC

  za sve grane.

** Premeštanje fajlova, promena imena

Premeštanje fajlova i promena imena može da se obavi na sledeći način:

#+BEGIN_SRC
$ git mv staroime novoime
#+END_SRC

ali pošto git ne vodi informacije o premeštanjima i promenama imena fajlova već
koristi heuristiku koja to obavlja post-festum, možemo koristiti i alate
operativnog sistema za premeštanje i promene imena, a zatim sve promene dodati
sa:

#+BEGIN_SRC
$ git add -A
#+END_SRC

Git će detektovati premeštene fajlove čak i u slučaju da su usput u izvesnoj
meri promenjenog sadržaja.

** Privremeno "sklanjanje" lokalnih izmena

- U sred ste rada i stiže zahtev da se nešto mora hitno uraditi.
- Dva načina na koji se može odgovoriti na ovaj zahtev:
  - Napraviti novi klon repozitorijuma, postaviti se na odgovarajuću granu,
    obaviti izmenu i poslati izmene.
  - Iskoristiti operaciju =stash= koja "sklanja" lokalne promene na stek promena
    i dovodi radno stablo u čisto stanje, pozicioniranje na odgovarajuću granu,
    obavljanje izmena, vraćanje lokalnih promena sa stash steka.

  #+BEGIN_SRC sh
  $ git stash # Sklanjanje lokalnih promena
  $ git checkout neka_grana
  $ ... # Potrebne ispravke
  $ git commit -a
  $ git checkout ...
  $ git stash pop # Vraćanje lokalnih promena
  #+END_SRC
  
** Revizije

- Revizije imenuju /commit/ objekat.
- /Commit/ može biti identifikovan sa kriptografskim SHA1 ključem dužine
  40-bajtova. Na primer =dae86e1950b1277e545cee180551750029cfe735=. Može
- se koristiti skraćena verija ukoliko je jednoznačana, na primer =dae86e=.
  Korišćenje simboličkih imena grana i oznaka (ili reference). Na primer,
  =master=, =heads/master=, =refs/heads/master=, =refs/remotes/origin/master=,
  =HEAD=, =ORIG_HEAD= itd.
- Referenca sa sufiksom =@= i vremenskom odrednicom u zagradama. Na primer,
  =HEAD@{yesterday}=, =master@{1 week ago}=, =moja_grana@{2011-03-17 17:00:00}=.
- Referenca sa sufiksom =@= i celim brojem =n= u zagradama označava vrednost
  reference =n= promena unazad. Na primer, =master@{3}=, =moja_grana@{1}=. Ako
  se referenca izostavi uzima se tekuća grana.
  
#+REVEAL: split

- Revizija praćena znakom =^= iza koje je opciono naveden ceo broj =n=. Označava
  n-ti roditeljski commit date revizije. Na primer =HEAD^=, =master^^=,
  =v1.5.1^2=. Ako se n izostavi podrazumeva se 1.
- Revizija praćena znakom =~= iza koje je opciono naveden ceo broj =n=. Označava
  n-ti predak do koga se stiže preko prvog roditelja. Na primer =master~=.
- Za detalje videti http://schacon.github.com/git/gitrevisions.html

* Grane (/Branches/)
** Grane – Branches

 - Grane su alternativni tokovi razvoja.
 - Kreiranje grana kod Git-a je jednostavno i brzo tako da se ohrabruje njihovo
   često kreiranje (npr. za svaki /feature/, /bugfix/ i sl.).
 - Osnovna grana se naziva /master/. Ona obično uvek postoji (osim kod praznog
   repozitorijuma).
  
** Vrste grana

 - Grane u git repozitorijumu mogu biti:
   - /lokalne/: Nastale u lokalnom repozitorijumu i ne prate druge grane.
   - /tracking/: Lokalne grane koje prate druge grane (tj. podešena ima je
     /upstream/ grana). Najčešće prate /remote tracking grane/.
   - /remote tracking/: Grane nastale u udaljenom repozitorijumu koje se
     kloniraju u lokalni.
    
** Kako to sve izgleda u repozitorijumu

#+ATTR_ORG: :width 300px
#+attr_html: :style height: 500px;
[[./images/DAG.svg]]

#+ATTR_HTML: :style font-size: 80%;
- grane su reference(/refs/) na poslednji /commit/ alternativnog toka.
- =nova_grana= je lokalna grana na kojoj se radno stablo trenutno nalazi (=HEAD=
  pokazuje na ovu granu).
- =origin/master= i =origin/udaljena_grana= su /remote tracking/ grane udaljenog
  repozitorijuma =origin=.
- =master= je lokalna grana koja prati =origin/master= tj. ona je /tracking/
  grana.

** Grane i operacije

#+ATTR_ORG: :width 300px
[[./images/branches-SO.png]]

#+attr_html: :class footer :style clear: both;
http://stackoverflow.com/questions/25786808/how-many-types-of-branches-exist-in-git

** Kreiranje grane

Kreiranje nezavisne lokalne grane:

#+BEGIN_SRC
$ git branch mojagrana 
#+END_SRC

Kreiranje grane koja prati udaljenu (/tracking branch/) Udaljena grana je u
lokalnom repozitorijumu predstavljena kao =<udaljeni repo>/<ime grane>=. Na
primer =origin/udaljenagrana=.

#+BEGIN_SRC
$ git branch -t origin/udaljenagrana
#+END_SRC

Prethodni primer će kreirati tracking granu koja se zove kao i udaljena
(=udaljenagrana=). Ako želimo da kreiramo tracking granu koja se zove drugačije
radimo:

#+BEGIN_SRC
$ git branch mojagrana -t origin/udaljenagrana
#+END_SRC

** Informacije o granama

Spisak lokalnih grana, sa =*= označena tekuća:

#+BEGIN_SRC
$ git branch
  * master
  moja_grana
#+END_SRC

Spisak lokalnih i /remote tracking/ grana:

#+BEGIN_SRC
$ git branch -a 
#+END_SRC

Spisak /remote tracking/ grana:

#+BEGIN_SRC
$ git branch -r
#+END_SRC

Spisak lokalnih grana i njihovih /upstream/ grana:

#+BEGIN_SRC
$ git branch -vv
#+END_SRC

** Prelazak između grana


- Promena grane podrazumeva izmenu radnog stabla tako da odgovara verziji sa
  grane.
- Grana se menja komandom checkout na sledeći način:
  
  #+BEGIN_SRC
  $ git checkout moja_grana
  Switched to branch ’moja_grana’
  $ git checkout master
  Switched to branch ’master’
  #+END_SRC

- Ako želimo da kreiramo novu granu i pređemo na nju:
  
  #+BEGIN_SRC
  $ git checkout -b moja_grana
  Switched to a new branch ’moja_grana’
  #+END_SRC

- A ako je novokreirana grana /tracking/:
  
  #+BEGIN_SRC sh
  $ git checkout -t origin/udaljena_grana
  
  # Ili ako želimo posebno ime
  $ git checkout -b moja_grana -t origin/udaljena_grana
  #+END_SRC

** Brisanje lokalnih grana

Brisanje lokalne grane:

#+BEGIN_SRC
$ git branch -d grana_za_brisanje
#+END_SRC

Prethodna komanda će proveriti da li je grana prethodno spojena (/merge/) na
neku drugu i ako nije odbiti da uradi posao jer bi to značilo ostavljanje
nespojenih /commit/-a sa grane da "vise" (/dangling objects/). Ovi /commit/-i bi
bili trajno obrisani prilikom sledećeg izvršavanja komande =git gc=.

Ako smo sigurni da želimo da obrišemo nespojenu granu to radimo sa:

#+BEGIN_SRC
$ git branch -D grana_za_brisanje
#+END_SRC

** Slanje promena u drugi repozitorijum

Slanje promena na /upstream/ granu se radi sa:

#+BEGIN_SRC
$ git push
#+END_SRC

Objavljivanje/kreiranje grane na udaljenom repozitorijumu se radi na sledeći
način:

#+BEGIN_SRC sh
$ git push origin moja_grana
$ git push -u origin moja_grana    # sa podešavanjem upstream grane
#+END_SRC

Ili ako želite da se na udaljenom repo-u zove drugačije:

#+BEGIN_SRC
$ git push origin moja_grana:super_grana
#+END_SRC

Ili ako želite da pošaljete sve grane (npr. /push/ u prazan repo):

#+BEGIN_SRC
$ git push --all origin # ili...
$ git push origin '*:*'
#+END_SRC

** Slanje promena u drugi repozitorijum

A ako želimo da lokalne grane ujedno postanu tracking za upravo objavljene grane:

#+BEGIN_SRC
$ git push -u --all origin
#+END_SRC

Naravno preduslov je da je =origin= udaljeni repozitorijum podešen.

** push.default - TODO
** Podešavanje veze sa udaljenim repozitorijumom

Prethodne komande su podrazumevale da je udaljeni repozitorijum sa imenom
=origin= već podešen. Ukoliko je lokalni repozitorijum nastao kloniranjem
udaljenog ovo jeste tako, ali ukoliko nije (na primer, hoćemo da uradimo =push=
u prazan centralni repozitorijum) možemo kreirati vezu na sledeći način:

#+BEGIN_SRC
$ git remote add origin https://puppet.ftn.uns.ac.rs/rks/timX/git
#+END_SRC

A zatim se mogu izlistati svi udaljeni repozitorijumi sa:

#+BEGIN_SRC
$ git remote
#+END_SRC

Ili se mogu prikazati detalji određenog repozitorijuma, zajedno sa granama koje
se prate sa:

#+BEGIN_SRC
$ git remote show origin
#+END_SRC

** Brisanje udaljenih grana

Brisanje grane u udaljenom repozitorijumu se može uraditi na sledeći način:

#+BEGIN_SRC
$ git push origin :udaljena_grana
#+END_SRC

ili u novijim verzijama:

#+BEGIN_SRC
$ git push origin --delete udaljena_grana
#+END_SRC

** Poređenje grana (/commit/-a)

Da bi videli koji fajlovi su promenjeni između dve grane uz ignorisanje
/whitespace/ karaktera (=-w=):

#+BEGIN_SRC
$ git diff -w --name-status master..integration
#+END_SRC

Da vidimo promene između vrhova dve grane:

#+BEGIN_SRC
$ git diff master..integration | kompare -
#+END_SRC

Da vidimo vizuelno sve izmene nad fajlovima u folderu =src=:

#+BEGIN_SRC
$ git diff -w --diff-filter=M master..integration src/ | kompare -
#+END_SRC

Šta imamo na =integration= što nije uključeno na =master= (/tri tačke!/):

#+BEGIN_SRC
$ git diff master...integration | kompare -
#+END_SRC

Poređenje možemo obaviti između bilo koja dva /commit/-a (po /hash/ /id/-u).

* Spajanje grana (/merging/)
** Spajanje grana – /merge/

- Komanda =pull= automatski radi spajanje grane sa udaljenog repozitorijuma.
  
  #+BEGIN_SRC
  $ git pull
  #+END_SRC

- A možemo spajanje obaviti i eksplicitno. Na primer:
  
  #+BEGIN_SRC
  $ git fetch
  $ git merge origin/master
  #+END_SRC
  
- =fetch= će pokupiti promene sa udaljenog repozitorijuma ali neće automatski
  obaviti spajanje na tekuću /tracking granu/.
- =merge= obavlja spajanje. Ako ne dođe do konflikta automatski se vrši =commit=
  (ovo se može promeniti navođenjem =--no–commit= parametra).
- Ako dođe do konflikta potrebno ga je razrešiti ručno i zatim dodati promenu i
  uraditi =commit=.
  
** Spajanje grana – strategije

- Prilikom operacije spajanja moguće je zadati odgovarajuću =merge= strategiju
  navođenjem parametra iza =-X=.
- Podrazumevana strategija je trenutno =recursive= a interesantne su i
  strategije =ours/theirs= koje će preuzeti naše ili udaljene promene kao
  podrazumevane u novoj verziji.

** Spajanje grana – /fast-forward merge/

Ukoliko je polazni commit grane koju spajamo jednak vrhu tekuće grane git će
podrazumevano da uradi tzv. /fast-forward/ merge.

#+ATTR_ORG: :width 300px
[[./images/Merge-ff.svg]]

** Spajanje grana – /no fast-forward merge/

Ukoliko se želi zadržati informacija o tome da je postojao alternativni tok
(grana) može se proslediti parametar =--no-ff= čime se merge obavlja na klasičan
način.

#+ATTR_ORG: :width 300px
[[./images/Merge-no-ff.svg]]

** Spajanje grana – /rebase/

Drugi mehanizam spajanja promena sa druge grane je /rebase/.

#+ATTR_ORG: :width 300px
[[./images/Merge-rebase.svg]]

#+ATTR_HTML: :class attention
*Važno*: =rebase= menja istoriju. Ne raditi na udaljenim deljenim granama.

** Preuzimanje pojedinačnih /commit/-a – /cherry-pick/

Ukoliko je potrebno preuzeti pojedinačnu promenu (/commit/) i primeniti je na
tekuću granu koristi se komanda =cherry-pick=.

Primeri:

- Preuzmi commit master na tekući `HEAD`
  
  #+BEGIN_SRC
  $ git cherry-pick master
  #+END_SRC

- Preuzmi /commit master/ ali edituj /commit/ log poruku 
  
  #+BEGIN_SRC
  $ git cherry-pick -e master
  #+END_SRC

- Preuzmi /commit/ =7f546d= u WT i index
  
  #+BEGIN_SRC
  $ git cherry-pick -n 7f546d
  #+END_SRC

- Preuzmi 5-ti i treći /commit/ od kraja /master/ grane
  
  #+BEGIN_SRC
  $ git cherry-pick master~4 master~2 
  #+END_SRC

** Razrešavanje konflikta

- Konflikti će biti označeni odgovarajućim markerima unutar tekstualnih fajlova.
  
  #+BEGIN_SRC
  <<<<<<< HEAD:file.txt
  Hello world
  =======
  Goodbye
  >>>>>>> 77976da35a11db4580b80ae27e8d65caf5208086:file.txt
  #+END_SRC

- Konflikt razrešavamo ručnom ispravkom fajla u kome je nastao i dodavanjem u indeks:
  
  #+BEGIN_SRC
  $ git add file.txt
  $ git commit
  #+END_SRC

** Razrešavanje konflikta

- Kod konflikta komanda git diff će prikazivati /three-way-diff/ između zajedničkog
  pretka, tekuće verzije i verzije sa druge grane. Razrešenje preuzimanjem naše ili
  tuđe verzije obavljamo sa:
  
  #+BEGIN_SRC
  $ git checkout --ours file.txt
  $ git checkout --theirs file.txt
  #+END_SRC

  posle čega je potrebno uraditi =add=.

- Od spoja možemo odustati sa:
  
  #+BEGIN_SRC
  $ git master --abort
  #+END_SRC

* Razmena promena
** Razmena promena

 - Može se obavljati putem deljenog repozitorijuma:
   
   #+BEGIN_SRC
   $ git pull ....
   $ git fetch ....
   $ git push ....
   #+END_SRC

 - Putem lokalnog daemon-a:
   
   #+BEGIN_SRC
   $ git daemon --export-all --base-path=.
   #+END_SRC
   
   Ili ako želimo i mogućnost =push= operacije:
   
   #+BEGIN_SRC
   $ git daemon --export-all --enable=receive-pack --base-path=.
   #+END_SRC

   #+ATTR_HTML: :class attention
   *Napomena:* Sa ovom komandom =push= operacija nije moguća ka repozitorijumima
   koji nisu /bare/.

#+REVEAL: split

 Ili upotrebom fajlova (mejlom, na prenosnom disku i sl.).

 - Putem tzv. /bundle/-ova :
   
   #+BEGIN_SRC
   $ git bundle ...
   $ git unbundle ....
   #+END_SRC

#+REVEAL: split

 - Putem zakrpa (/patches/). U ovoj varijanti promena može da se prenosi između
   repozitorijuma sa različitom istorijom.

   Poslednjih =n= /commit/-a:
   
   #+BEGIN_SRC
   $ git format-patch -n 
   #+END_SRC
  
   Promene na =master= grani

   #+BEGIN_SRC
   $ git format-patch origin/master..master
   #+END_SRC

   Od poslednjeg =pull=-a i zatim primena na odredišni repozitorijum:
   
   #+BEGIN_SRC
   $ git am *.patch
   #+END_SRC

* Ispravke grešaka
** Ispravke grešaka

 Imamo sledeće situacije:

 - Uradili smo lokalne izmene ili smo izmenili indeks i želimo od tih promena da
   odustanemo.
 - Uradili smo izmenu i primetili smo da smo pogrešili a izmenu još nismo poslali
   u udaljeni repozitorijum.
 - Primetili smo da je izmena koja nije poslednja a poslata je u udaljeni
   repozitorijum neispravana.
 - Izmena koja nije poslednja je neispravna ali još uvek nije poslata u udaljeni
   repozitorijum.
  
#+ATTR_HTML: :class attention
    *Važna napomena*: Obratite pažnju da se istorija koja je objavljena (promene
    poslate u udaljeni repozitorijum) ne sme menjati! Može se samo kreirati nova
    promena koja poništava staru.

** Odustajanje od lokalnih promena

Izmenili smo indeks ili smo izmenili fajlove u lokalnom stablu. Ukoliko želimo
da poništimo sadržaj index-a i/ili lokalnog stabla koristimo komandu =reset=.
=reset= komanda može da, opciono, "premota" =HEAD= pokazivač tekuće grane na
zadatu verziju i da uskladi index i/ili radno stablo sa datom verzijom.

Dovođenje index-a i radnog stabla na =HEAD= verziju. Posle ovoga =git diff
[--cached]= komanda javlja da nema razlika.

#+BEGIN_SRC
$ git reset --hard HEAD
#+END_SRC

#+REVEAL: split

Samo želimo da premotamo tekući =HEAD= jednu verziju unazad ali ne želimo da
promenimo indeks i radno stablo. Promene obeležene za dodavanje ostaju.

#+BEGIN_SRC
$ git reset --soft HEAD^
#+END_SRC

Resetujemo indeks ali ne i radno stablo. Ovo je podrazumevano ponašanje
(=--mixed= može da se izostavi).

#+BEGIN_SRC
$ git reset --mixed HEAD
#+END_SRC

#+ATTR_HTML: :class attention
*Napomena*: =reset= komanda je generalan način za pomeranje pokazivača tekuće
grane. Pomeranjem =HEAD=-a git pamti prethodni u =ORIG_HEAD= tako da možemo uvek
da poništimo efekat =reset= komande. Takođe, svi prethodni položaji =HEAD=
reference čuvaju se u =reflog= strukturi. Videti [[*Potraga za izgubljenim /commit/-ima - =reflog=][reflog sekciju]].

** Poništavanje lokalne promene nad proizvoljnim fajlom

Ukoliko želimo da odustanemo od promene proizvoljnog fajla radimo sledeće:

- Vraćanje na verziju iz indeksa:
  
  #+BEGIN_SRC
  $ git checkout -- readme.txt
  #+END_SRC

- Vraćanje na verziju sa =HEAD=-a:
  
  #+BEGIN_SRC
  $ git checkout HEAD readme.txt
  #+END_SRC

** Izmena poslednjeg /commit/-a

Ukoliko smo uradili commit a zatim primetili da smo nešto zaboravili, ili smo
upisali pogrešnu log poruku možemo uraditi sledeće:

#+BEGIN_SRC sh
# Ovaj commit je pogrešan
$ git commit 

# Vršimo potrebne dorade
# Kažemo git-u da je ovo dodatak
$ git commit --amend 

# Dobićemo mogućnost ažuriranja log poruke
# ...što je vrlo slično sa sledećim:
# Premotavamo se na verziju unazad
$ git reset --soft HEAD^

# ali indeks i radno stablo ne menjamo
# ... obavljamo izmene ...
# radimo commit sa log porukom prethodnog HEAD-
$ git commit -c ORIG_HEAD
# Dobićemo mogućnost da modifikujemo log poruku
#+END_SRC

** Poništavanje proizvoljne promene

Ukoliko želimo da poništimo efekat neke od promena iz istorije koristimo komandu
revert:

#+BEGIN_SRC sh
$ git revert <verzija>
# ... razrešavamo eventualne konflikte
# izazvane kasnijim izmenama ...
$ git commit
#+END_SRC

** Izmena istorije

#+ATTR_HTML: :class attention
*Napomena*: Ovo se radi samo sa lokalnim granama, izmenama na tracking granama
koje još nisu poslate na udaljeni repozitorijum, ili u dogovoru sa ostatkom
tima!!!

Proizvoljne commit-e možemo menjati sa rebase komandom u interaktivnom modu.

#+BEGIN_SRC sh
$ git rebase -i HEAD~3
# Zadajemo parent commit-a od kojeg krećemo
# Dobijamo listu u editoru sličnu ovoj
pick f7f3f6d changed my name a bit
pick 310154e updated README formatting and added blame
pick a5f4a0d added cat-file
# Rebase da5fd63..2bb69f5 onto da5fd63
*
# Commands:
# p, pick = use commit
# r, reword = use commit, but edit the commit message
# e, edit = use commit, but stop for amending
# s, squash = use commit, but meld into previous commit
# f, fixup = like "squash", but discard this commit’s log message
# x, exec = run command (the rest of the line) using shell
#
# If you remove a line here THAT COMMIT WILL BE LOST.
# However, if you remove everything, the rebase will be aborted.
#
#+END_SRC

#+REVEAL: split

Menjamo =pick= komande sa =edit= i =squash=. Na primer:

#+BEGIN_SRC
edit f7f3f6d changed my name a bit
pick 310154e updated README formatting and added blame
pick a5f4a0d added cat-file
#+END_SRC

Ovim ćemo dobiti mogućnost izmene /commit/-a =f7f3f6d=. Radimo izmenu i
modifikujemo commit sa =--amend= opcijom. Zatim nastavljamo =rebase= sa:

#+BEGIN_SRC
$ git rebase ––continue
#+END_SRC

** Izmena istorije sa =git rebase --onto=

Ukoliko želimo da deo grane preselimo na drugu granu koristimo =git rebase
--onto=.

Dva oblika:

#+BEGIN_SRC
git rebase --onto new_base old_base
#+END_SRC

#+BEGIN_SRC
git rebase --onto new_base old_base target_ref
#+END_SRC

** Potraga za izgubljenim /commit/-ima - =reflog=

- =reflog= predstavlja strukturu koja sadrži istoriju izmena =HEAD= reference.
- Podrazumevano ova struktura "pamti" 30 dana unazad.

#+BEGIN_SRC
git reflog
#+END_SRC

#+ATTR_ORG: :width 300px
#+ATTR_HTML: :style height: 500px;
[[./images/reflog.png]]

* Održavanje repozitorijuma
** Održavanje repozitorijuma

- Git ima jednostavne mehanizme skladištenja istorije bazirane na /snap-shot/
  modelu. Čuvaju se celi fajlovi u obliku /BLOB/ objekata.
- Inicijalno se /BLOB/-ovi čuvaju kao zasebni fajlovi u =.git/objects= folderu.
- Zbog toga, posebno kod velikih fajlova, repozitorijum može vremenom da
  značajno poraste. U ovim situacijama Git omogućava “pakovanje” objekata
  upotrebom efikasnog delta algoritma. Pronalaze se slični BLOB-ovi između kojih
  se izračuvana razlika (delta).
- Da bi se obavilo pakovanje objekata, i uklanjanje "visećih" objekata
  (/dangling objects/), dovoljno je pozvati:
  
  #+BEGIN_SRC
  $ git gc
  #+END_SRC

#+attr_html: :class footer :style clear: both;
- Detalje možete naći na http://schacon.github.com/git/user-manual.html#pack-files
* git submodules                                                   :noexport:
  
#+BEGIN_SRC
# copy the new URL to your local config (from .gitmodule to .git/config)
$ git submodule sync --recursive

# update the submodule from the new URL
$ git submodule update --init --recursive

# To work on a submodule you must have a new branch as 
# the `update` command leaves the submodule in HEAD detached state
$ cd content 
$ git checkout mybranch
Switched to branch 'mybranch'

# To merge upstream changes in the submodule
git submodule update --remote --merge

# To push all submodules before the main module
git push --recurse-submodules=on-demand
git config push.recurseSubmodules on-demand
#+END_SRC

* Modeli grananja
** Modeli grananja (/branching models/)

- Konvenciju imenovanja grana i proces koji opisuje način njihovog korišćenja.
- Trivijalan model grananja koristi samo =master= granu.
- Nešto složeniji koristi granu za razvoj (=develop=) i =master= granu na koju
  se vrši spajanje kada procenimo da imamo stabilnu verziju.
- Kod razvoja složenog softvera gde imamo više verzija koje moramo održavati
  potreban je i nešto složeniji model.
- Jedan od najpopularnijih modela grananja se naziva =GitFlow=.^{1}

#+attr_html: :class footer :style clear: both;
1. http://nvie.com/posts/a-successful-git-branching-model/

** /Feature branches/

- Način razvoja softvera gde se za svaku funkcionalnost softvera (/feature/)
  kreira nova grana.
- Prednosti:
  - izolacija koda za određenu funkcionalnost,
  - loše implementirana funkcionalnost se lako poništava,
  - jednostavniji uvid u progres po funkcionalnostima.
- Mane:
  - kod funkcionanosti koja se dugo razvija odlaže se integracija što može
    dovesti do kasnijih problema.

** /GitFlow/ model

#+ATTR_ORG: :width 300px
[[./images/GitFlow.svg]]

#+attr_html: :class footer :style clear: both;
http://nvie.com/posts/a-successful-git-branching-model/

** Modifikovani /GitFlow/ model

#+ATTR_ORG: :width 300px
[[./images/GitFlow-Reloaded.svg]]

* Preporučena praksa
** Preporučena praksa u radu sa granama

- Čest =commit= vs. čista istorija.
- Lokalne (privatne) grane - čest /commit/ za beleženje međuverzija (mogućnost
  /undo/-a).
- Kasnije spajanje na javnu granu (npr. =master= ili =develop=) uz integraciju
  /commit/-a (/squash/).

#+attr_html: :class footer :style clear: both;
[[http://sandofsky.com/blog/git-workflow.html][Benjamin Sandofsky, Understanding the Git Workflow]]

** Kratkotrajne grane

Kreiramo i prelazimo na novu granu:

#+BEGIN_SRC
$ git checkout -b private_feature_branch
#+END_SRC

Vršimo izmene, ažuriramo indeks:

#+BEGIN_SRC
$ git add ...
#+END_SRC

Beležimo promenu:

#+BEGIN_SRC
$ git commit -am "WIP"
#+END_SRC

#+attr_html: :class footer :style clear: both;
[[http://sandofsky.com/blog/git-workflow.html][Benjamin Sandofsky, Understanding the Git Workflow]]

** Kratkotrajne grane

Kada završimo sa izmenama, prelazimo na master granu:

#+BEGIN_SRC
$ git checkout master
#+END_SRC

Spajamo granu uz integraciju svih /commit/-a:

#+BEGIN_SRC
$ git merge --squash private_feature_branch
#+END_SRC

=commit= - zadajemo detaljnu log poruku:

#+BEGIN_SRC
$ git commit -v
#+END_SRC

#+attr_html: :class footer :style clear: both;
[[http://sandofsky.com/blog/git-workflow.html][Benjamin Sandofsky, Understanding the Git Workflow]]

** Dugotrajne grane

Kada jedan /squash commit/ ne bi bio adekvatan jer se grana duže razvijala pa je
potrebno svesti na više /commit/-a. Na /feature/ grani radimo sređivanje
interaktivnim /rebase/-om:

#+BEGIN_SRC
$ git rebase --interactive master
#+END_SRC

ili kreiramo granu za sređivanje promena:

#+BEGIN_SRC sh
# Prelazimo na master
$ git checkout master

# Kreiramo granu za sređivanje sa mastera
$ git checkout -b cleaned_up_branch

# Spajamo i integrišemo sve promene sa privatne grane
$ git merge --squash private_feature_branch

# Resetujemo indeks da bi dobili čistu situaciju
# sa svim izmenama koje su bile na privatnoj grani u radnoj kopiji.
$ git reset
#+END_SRC

Posle ovoga možemo obaviti standardno interaktivno ažuriranje indeksa i
/commit/-e.

#+attr_html: :class footer :style clear: both;
[[http://sandofsky.com/blog/git-workflow.html][Benjamin Sandofsky, Understanding the Git Workflow]]

** Upotreba /Subversion/ repozitorijuma

Git je moguće koristiti i sa /Subversion/ repozitorijumom.

#+BEGIN_SRC sh
# Kloniranje svn repozitorijuma standardnog layout-a (trunk, branches, tags)
$ git svn clone -s https://..../

# Izmena fajlova + commit (može više puta)
# Preuzimanje promena sa svn-a i rebase lokalnih promena
$ git svn rebase

# Slanje izmena na svn repo
$ git svn dcommit
#+END_SRC

* /Subversion/ i lokalne grane

Moguće je kreirati i grane na svn repozitorijumu i povezati ih sa lokalnim.

#+BEGIN_SRC sh
$ git checkout -b mojagrana

# Izmene fajlova
$ git commit -m "Neka izmena"

# Kreiranje grane na svn-u (mora se biti online, radi se samo jednom)
$ git svn branch mojagrana

# Povezivanje lokalne i svn grane (radi se samo jednom)
$ git branch --set-upstream mojagrana remotes/mojagrana

# Slanje promena
$ git svn dcommit
#+END_SRC

* Implementacija
** Git repozitorijum

- /Objektna baza/: Jednostavan model repozitorijuma baziran na mapama (parovi
  ključ-vrednost).
- Ključevi su /SHA1 heš sadržaja/ koji se čuva + hedera.
- /Tri vrste objekata/vrednosti/. Sadržaj se komprimuje pomoću /zlib/
  biblioteke.
- Reference - /pokazivači/ na određene objekte u repozitorijumu.
- Repozitorijum se nalazi u =.git= direktorijumu unutar direktorijuma gde je
  izvršena inicijalizacija sa =git init= komandom (videti u nastavku).

** Vrste git objekata

Repozitorijum je objektna baza gde postoje tri vrste objekata:

- /Blob:/ Niz bajtova bez semantike. Najčešće služi za opis sadržaja fajla.
- /Stablo(Tree):/ Čuva niz referenci na blobove i druga podstabla zajedno sa
  meta-podacima kao što su: naziv fajla, mod i sl.
- /Commit:/ "Pokazivač" na stablo koje opisuje kako je projekat izgledao u
  trenutku /commit/-a. Osim toga sadrži niz meta-informacija kao što su autor,
  vreme nastanka, pokazivače na prethodne /commit/-e i dr.

#+REVEAL: split

 - Svi objekti su smešteni na isti način u =.git/objects= direktorijumu. Prva
   dva karaktera /SHA1/ heša čine naziv poddirektorijuma dok preostalih 38 čini
   ime fajla.
 - Na primer: =.git/obects/bb/82d56602c51c7998911b2d07e84e25a942a028=
 - Gotovo sve Git operacije se baziraju na manipulaciji sa strukturom koja se
   sastoji od objekata čiji tip je jedan od navedenih.
  
** /BLOB/

Niz bajtova bez semantike i metapodataka. Najčešće služi za opis sadržaja
fajla.

#+BEGIN_SRC java
blob 107\0
class MainClass {
  static void main(int argc, String[] argv) {
    System.out.println("Hello World!");
  }
}
#+END_SRC

#+ATTR_ORG: :width 300px
#+attr_html: :style height: 400px;
[[./images/blob.svg]]

** /Tree/
- Čuva niz referenci na blobove i druga podstabla zajedno sa meta-podacima kao
  što su: naziv fajla, mod i sl.
- Rekurzivne reference na druga stabla.
- Struktura tree objekta:

#+BEGIN_SRC
tree 64\0
100644 blob 8e0462460e55357686a844cfd27564ab5a6055a6 README
040000 tree 1d6a41c11d3557faae7522bc2af7042e8723e63a src
#+END_SRC

#+ATTR_ORG: :width 300px
#+attr_html: :style height: 400px;
[[./images/tree.svg]]

** /Commit/

- Sadrži informacije o trajnoj zabelešci (/commit/): referenca na stablo
  (/tree/), autor, osobu koja je kreirala zabelešku (/commiter/), datum i vreme
  nastanka kao i vezu prema pretodnim zbeleškama.

Struktura commit objekta:

#+BEGIN_SRC
commit 195\0
tree c7984074ae6aae0bb8b087ca0a5bd6026b108528
author Igor Dejanovic <igor.dejanovic@gmail.com> 1350920069 +0200
committer Igor Dejanovic <igor.dejanovic@gmail.com> 1350920069 +0200
Prvi commit.
#+END_SRC

#+ATTR_ORG: :width 300px
#+attr_html: :style height: 300px;
[[./images/commit.svg]]

** Prvi /commit/

#+ATTR_ORG: :width 300px
#+attr_html: :style height: 500px;
[[./images/prvi-commit.svg]]

** Drugi /commit/

#+ATTR_ORG: :width 300px
#+attr_html: :style height: 500px;
[[./images/drugi-commit.svg]]

** Reference

- Pokazivači na objekte u git repozitorijumu (najčešće /commit/-e).
- Smeštene u =.git/refs= direktorijumu.
- Dele se na:
  - /glave (heads)/ koje predstavljaju pokazivač na poslednji /commit/ sa grane.
  - /oznake (tags)/ koji predstavljaju obeleživač/marker /commit/-a koji je, na
    neki način, poseban. Na primer, možemo označiti određenu verziju projekta.
- Specijalna referenca =HEAD= pokazuje na glavu koja je tekuća čime označava
  granu na kojoj se radna kopija trenutno nalazi. Smeštena je u =.git/HEAD=
  fajlu.
- Navode se prema putanji u =refs= folderu (npr. =refs/heads/master=).

** Git repozitorijum sa objektima i referencama

#+ATTR_ORG: :width 300px
#+attr_html: :style height: 600px;
[[./images/git-repo.svg]]

* Literatura

- Scott Chacon, Ben Straub: /Pro Git/, Apress, 2014. Dostupna na:
  https://git-scm.com/book/en/v2
- Git dokumentacija - https://git-scm.com/doc
