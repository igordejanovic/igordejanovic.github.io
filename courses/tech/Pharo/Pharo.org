#+TITLE: Pharo
#+SUBTITLE: Bazirano na [[http://mooc.pharo.org][Pharo MOOC]]
#+EXPORT_FILE_NAME: index.html
#+SETUPFILE: ../../courses-startup.org
#+REVEAL_TRANS: slide

* Smalltalk
** Smalltalk :noexport:
   
#+BEGIN_QUOTE
Smalltalk is dangerous. It is a drug. My advice to you would be don't try it; it
could ruin your life. Once you take the time to learn it (to REALLY learn it)
you will see that there is still nothing out there that can quite touch it.

-- Andy Bower
#+END_QUOTE
** Šta je Smalltalk?
- Objektno-orijentisani dinamički reflektivni jezik.
- Xerox PARC - Alan Kay, Dan Ingalls i drugi - tokom 70-ih.
- Uticao na razvoj Actor model obrasca.
- Nastao pod uticajem Simule (prvi OO jezik, Norwegian Computing Center u Oslu -
  60-te).
- Jedan od najuticajnijih jezika.
- Napredni koncepti: sve je objekat, razmena poruka, "živ" sistem, virtualna
  mašina.
- Konstrukcionistički pristup programiranju.

#+attr_html: :class footer :style clear: both;
- https://en.wikipedia.org/wiki/PARC_(company)
- https://en.wikipedia.org/wiki/Smalltalk

** Istorijat
- Razvijen u par dana 1971 godine (/Smalltalk-71/) zbog opklade (Alan Kay).
- Kasnija verzija /Smalltalk-72/ je korišćena u istraživanjima.
- /Smalltalk-76/ - nasleđivanje klasa, razvojno okruženje
- Najpoznatija verzija Smalltalk-80 - meta-klase. Prva verzija dostupna van
  PARC-a (Apple, HP, DEC, UC Berkeley)
- Standardizovan - ANSI 1998
** Smalltalk implementacije
- Komercijalne
  - /Smalltalk-80/ (Xerox PARC)
  - /VisualWorks/ (ParcPlace Systems, prodato 1999 firmi Cincom)
  - /IBM VisualAge/ - napušteno u korist Jave. Današnji Eclipse je započeo kao
    VisualAge Smalltalk okruženje. Jedno vreme je i Java podrška bila
    implementirana u Smalltalk-u.

- FLOSS:
  - Squeak (moderna verzija Smalltalk-80) - Apple -> Disney -> HP Labs -> SAP
    Labs -> Y Combinator
  - Pharo - fork Squeak-a (2008) sa ciljem upotrebe u istraživanju i
    komercijalnim projektima (Pharo consortium, Pharo association)
  - Amber Smalltalk - Smalltalk u JavaScrript-u

#+attr_html: :class footer :style clear: both;
- https://en.wikipedia.org/wiki/VisualAge
- https://en.wikipedia.org/wiki/Squeak
 
** Familija Smalltalk i vezanih jezika

#+attr_html: :width 120%
[[./slike/smalltalk-history.png]]

#+attr_html: :class footer :style clear: both;
http://courses.cs.washington.edu/courses/cse341/04wi/lectures/16-smalltalk-intro.html

* Pharo uvod
** Pharo
   
- Pravi OO jezik ("sve je objekat") + IDE!
- Inspirisan Smalltalk-om
- Aktivna zajednica
- "Živ" sistem.
- Jednostavan i moćan objektni model
- Radi na Mac OSX, Linux, iOS, Android, Windows, Pi.
- 100% MIT
- [[https://github.com/pavel-krivanek/pharoMaterials/blob/master/features/PharoKeyFeatures.md][Pregled nekih osobina Pharo IDE i jezika]]
 
** Pharo instalacija
   
- Preporučena upotreba [[https://pharo.org/download][Pharo Launcher]] alata
  - Instalacija i upravljanje slikama i virtualnim mašinama

- Alternativno, može se koristiti [[http://get.pharo.org/][Zeroconf skripta]]:

#+BEGIN_SRC shell
# 64bit version
mkdir pharo
cd pharo
curl -L https://get.pharo.org/64/ | bash
# or if curl is not available:
wget -O- https://get.pharo.org/64 | bash
#+END_SRC

#+BEGIN_SRC shell
# 32bit version
curl -L https://get.pharo.org | bash
# or if curl is not available:
wget -O- https://get.pharo.org | bash
#+END_SRC

** Pharo fajl komponente

#+BEGIN_SRC
pharo
Pharo8.0-32bit-a153e04
Pharo.changes
Pharo.image
pharo-ui
pharo-vm
#+END_SRC

- =pharo-vm= - Pharo virtuelna mašina (/OS-specific/)
- =Pharo.image= - Perzistirano stanje/objekti
- =Pharo...sources= - Izvorni kod izdanja
- =Pharo.changes= - Promene u izvornom kodu od početka upotrebe

#+REVEAL: split

- =Pharo.image= i =Pharo.changes= su fajlovi gde dolazi do promena
- =Pharo.changes= se menja kada menjamo kod
- =Pharo.image= se menja kada eksplicitno tražimo perzistenciju stanja

** Cela sintaksa

Staje na jedan slajd:

#+BEGIN_SRC smalltalk
exampleWithNumber: x
    "A method that illustrates every part of Smalltalk method syntax."
    <menu>
    | y |
    true & false not & (nil isNil) ifFalse: [self halt].
    y := self size + super size.
    #($a #a "a" 1 1.0)
        do: [ :each |
            Transcript show: (each class name);
                       show: (each printString);
                       show: ' '].
    ^x < y
#+END_SRC

** Model
   
- Dinamički tipiziran
- Sve je objekat tj. instanca klase
- Sve metode su javne i virtualne
- Svi atributi su zaštićeni
- Jednostruko nasleđivanje (/Single inheritance/)

** Napisan u samom sebi
   
- Sve je napisano u Pharo!
- Jednostavna sintaksa/model za pristup svemu.

  [[./slike/hands.jpg]]

** Introspekcija
   
- Pharo nije "crna kutija".
- Sve što vidite su objekti sa kojima možete stupiti u interakciju i menjati ih
  "naživo".
- Program koji se razvija je nerazdvojni deo razvojnog okruženja.
- Npr. =Alt+Shift+Click= -> Halo hendleri!

#+ATTR_ORG: :width 300px
#+attr_html: :style height: 200px;
  [[./slike/halo.png]]

** Samo objekti, poruke...

- /Objekti/: mouse pointer, booleans, arrays, numbers, strings, windows, files,
  sound, url, socket, font, text, streams...
- /Poruke (messages)/: =size=, =+=, =at:put:=, =do:=, =collect:=,
  =ifTrue:ifFalse:=...
- Poruke predstavljaju **nameru** (šta treba uraditi). Metode opisuju kako treba
  nešto uraditi.
- Objekat koji prima poruku zovemo **prijemnikom** (/receiver/).

** ... i blokovi (/Block Closures/)

- Blokovi su vrsta anonimnih metoda.

#+BEGIN_SRC smalltalk
4 timesRepeat:
    [ Transcript show: 'Hello World!']
#+END_SRC

- Blokovi se navode unutar =[]=.

** Jednostavan, elegantan i uniforman model

- /Sve/ je objekat tj. instanca klase.
  - Klase i poruke su takođe objekti.
- Svo procesiranje se obavlja **razmenom poruka** (/message passing/) između
  objekata.

- Koristimo izraz **slanje poruke** jer:
  - metode se određuju dinamički
  - **kasno povezivanje** (/late binding/), samo virtuelni pozivi

- Postoji **samo jedan** mehanizam za pretragu metoda za sve objekte.

** Pharo objektni model
   
- Atributi instanci (/instance variables/) su zaštićeni (/protected/):
  - Privatni za objekat
  - Dostupni podklasama
- Metode su javne (/public/) i virtualne.
- Jednostruko nasleđivanje klasa.

** Slanje poruka

#+BEGIN_SRC smalltalk
Date today

Date today + 3 days

2 + 3

(point1 x * point2 y) - (point1 y * point2 x)
#+END_SRC

** Kreiranje objekata

Obavlja se slanjem poruke drugom objektu

#+BEGIN_SRC smalltalk
10@20
#+END_SRC

Nova instanca klase =Point= se kreira:

- slanjem poruke =@=
- objektu =10= (=SmallInteger=)
- sa argumentom =20= (=SmallInteger=)

** Kreiranje objekata - String

#+BEGIN_SRC smalltalk
'Pharo', 'is cool!'
=> 'Pharo is cool!'
#+END_SRC

Novi string se kreira spajanjem dva stringa tako što:
- se šalje poruka =,=
- stringu ='Pharo'=
- sa parametrom ='is cool!'=

** Kreiranje objekata

Slanjem poruke =new= ili =new:= klasi

#+BEGIN_SRC smalltalk
Monster new
=> aMonster
#+END_SRC

U prethodnom primeru =Monster= je ime klase a =new= je poruka koja se šalje ovoj
klasi. Rezultat je nova instanca klase =Monster=.

Kreiranje niza dužine 6.

#+BEGIN_SRC smalltalk
Array new: 6
=> #(nil nil nil nil nil nil)
#+END_SRC

Slanjem poruke klasi izvšava se metoda klase (/class method/).

#+BEGIN_SRC smalltalk
Tamagoshi withHunger: 10
#+END_SRC

** Less is more!

- Bez konstruktora
- Bez statičkih metoda
- Bez deklaracije tipova
- Bez interfejsa
- Bez /package/private/protected/ modifikatora
- Bez parametrizovanih tipova
- Bez boxing-a
- Ali i dalje vrlo moćan jezik!

** Hello world

#+BEGIN_SRC smalltalk
'Hello World' asMorph openInWindow
#+END_SRC

Šaljemo poruku =asMorph= stringu =Hello World= i dobijamo grafički element
(/Morph/). Dobijenom grafičkom elementu šaljemo poruku =openInWindow= da bi ga
prikazali u prozoru.

** Primer - preuzimanje slike sa web-a

#+BEGIN_SRC smalltalk
(ZnEasy getPng: 'http://pharo.org/web/files/pharo.png') asMorph openInWindow
#+END_SRC

- =ZnEasy= je ime klase. Klase su globalno dostupe i nazivi počinju sa velikim
  slovom.
- =getPng:= je poruka koju šaljemo klasi =ZnEasy=. Ova poruka ima argument. U
  ovom slučaju to je string ='http://pharo.org/web/files/pharo.png'=
  - Poruke koje imaju argumente se pišu sa =:= na kraju naziva i mogu biti
    višesložne. Ovakve poruke nazivamo =keyword message=.
    
- Poruka =asMorph= šalje se objektu koji vraća poruka =getPng:=. Ovo je obična
  unarna poruka bez argumenata.
  
- Poruka =openInWindow= se šalje objektu koji vraća poruka =asMorph=.

- Ove dve unarne poruke se primenjuju s leva na desno.

** Sintaksni elementi jezika

| Vrsta                       | Primer                          |
|-----------------------------+---------------------------------|
| Komentar                    | ~"Ovo je komentar"~             |
| Karakteri                   | ~$c~ ~$#~ ~$@~                  |
| String                      | ~'Ovo je string'~               |
| Simbol (jedinstveni string) | ~#prvi~ ~#+~                    |
| Literal niz                 | ~#(23 56 89)~                   |
| Integer                     | ~45~, ~2r10100~                 |
| Real                        | ~1.5~, ~6.03e-34~, ~4~, ~2.4e7~ |

** Sintaksni elementi jezika

| Vrsta     | Primer                              |
|-----------+-------------------------------------|
| Boolean   | ~true~, ~false~                     |
|           | (instanca =True= i =False=)         |
| Undefined | ~nil~ (instanca ~UndefinedObject~ ) |
| Point     | ~10@120~                            |

** Osnovne jezičke konstrukcije

- Deklaracija privremene varijable: =| var |=
- Dodela vrednosti varijabli: ~var := aValue~
- Separator iskaza: =obj1 message1. obj2 message2.=
- Povratak vrednosti iz metode: =^ aValue=
- Blokovi (leksička zatvorenja ili anonimne metode)

#+BEGIN_SRC smalltalk
[ :x | x + 2 ] value: 5
=> 7
#+END_SRC

* Poruke
** Tri vrste poruka

1. Unarne poruke:
   - Sintaksa: =receiver selector=
   - Primeri:
   #+BEGIN_SRC smalltalk
   9 squared
   Date today
   #+END_SRC

2. Binarne poruke:
   - Sintaksa: =receiver selector argument=
   - Primeri:
   #+BEGIN_SRC smalltalk
   2 + 3
   3 @ 4
   #+END_SRC

3. /Keyword/ poruke:
   - Sintaksa: =receiver key1: arg1 key2: arg2=
   - Primeri:
   #+BEGIN_SRC smalltalk
   2 between: 10 and: 20
   5 to: 10 do: [ :i | Transcript show: i ]
   #+END_SRC

** Slanje unarne poruke

#+BEGIN_SRC
receiver selector
#+END_SRC

Primer:

#+BEGIN_SRC smalltalk
10000 factorial
#+END_SRC


Šaljemo poruku =factorial= objektu =10000=.

** Slanje binarne poruke

#+BEGIN_SRC
receiver selector argument
#+END_SRC

Primer:

#+BEGIN_SRC smalltalk
1 + 3
#+END_SRC

Šaljemo poruku =+= objektu =1= sa parametrom =3=.

** Slanje /keyword/ poruke

#+BEGIN_SRC smalltalk
receiver keyword1: arg1 keyword2: arg2
#+END_SRC

Ekvivalentno u Javi ili C-like jezicima:

#+BEGIN_SRC java
receiver.keyword1keyword2(arg1, arg2)
#+END_SRC

** /Keyword/ poruke za Java programere

U Javi

#+BEGIN_SRC java
postman.send(mail, recipient);
#+END_SRC

#+ATTR_REVEAL: :frag t
#+BEGIN_SRC
postman . send ( mail , recipient );
#+END_SRC

#+ATTR_REVEAL: :frag t
#+BEGIN_SRC
postman send mail recipient
#+END_SRC

#+ATTR_REVEAL: :frag t
#+BEGIN_SRC
postman send mail to recipient
#+END_SRC

#+ATTR_REVEAL: :frag t
U Pharo/Smalltalk-u

#+ATTR_REVEAL: :frag t
#+BEGIN_SRC smalltalk
postman send: mail to: recipient
#+END_SRC

** Primer: slanje HTTP zahteva

#+BEGIN_SRC smalltalk
ZnClient new
  url: 'https://en.wikipedia.org/w/index.php';
  queryAt:'title' put:'Pharo';
  queryAt:'action' put:'edit';
  get
#+END_SRC

- =new= je unarna poruka koja se šalje klasi =ZnClient=
- =queryAt:put:= je /keyword/ poruka sa dva argumenta
- =get= je unarna poruka
- =;= je specijalan operator koji zovemo kaskada (/cascade/) - šaljemo poruku
  istom objektu primaocu.

** Poruke su svuda

- Uslovi
- Petlje
- Iteracije
- Konkurencija
- ...

** Primer - =Integer>>factorial=

#+BEGIN_SRC smalltalk
factorial
	"Answer the factorial of the receiver."

	self = 0 ifTrue: [^ 1].
	self > 0 ifTrue: [^ self * (self - 1) factorial].
	self error: 'Not valid for negative integers'
#+END_SRC

- =ifTrue:= je poruka koja se šalje =Boolean= objektu koji vraća poruka ===
  poslata objektu =self= sa parametrom =0=.
- Postoje i =ifTrue:ifFalse:=, =ifFalse:ifTrue:= i =ifFalse:=
- Implementirane su u klasama =True= i =False= i možete ih pročitati. Ne postoji
  ništa specijalno u vezi ovih poruka!
  
** Kompozicija poruka - s leva na desno

Šta se dešava kada imamo sukcesivne poruke istog tipa?

#+BEGIN_SRC smalltalk
1000 factorial class name
> 'LargePositiveInteger'
#+END_SRC

ekvivalentno je sa:

#+BEGIN_SRC smalltalk
(((1000 factorial) class) name)
#+END_SRC

** Prioriteti poruka

#+BEGIN_SRC python
(Msg) > Unary > Binary > Keywords
#+END_SRC

Ova pravila redukuju potrebu za navođenjem zagrada.

** Prioritet primeri

#+BEGIN_SRC smalltalk
2 + 3 squared
> 2 + 9
> 11
#+END_SRC

- Prvo unarna =squared=
- Zatim binarna =+=

** Prioritet primeri

#+BEGIN_SRC smalltalk
2 raisedTo: 3 + 2
> 2 raisedTo: 5
> 32
#+END_SRC

- Prvo binarna =+=
- Zatim /keyword/ =raisedTo:=

** Prioritet primeri

#+BEGIN_SRC smalltalk
Color gray - Color white = Color black
> aGray - aWhite = aBlack
> aBlack = aBlack
> true
#+END_SRC

- Prvo unarne
- Zatim binarne s leva na desno: =-= pa onda ===

** Prioritet primeri

#+BEGIN_SRC smalltalk
1 class maxVal + 1
> 1073741824
#+END_SRC

- unarna =class=, unarna =maxVal=, binarna =+=

#+BEGIN_SRC smalltalk
1 class
> SmallInteger

1 class maxVal
> 1073741823

1 class maxVal + 1
> 1073741824

(1 class maxVal + 1) class
> LargePositiveInteger
#+END_SRC

** Upotreba zagrada kod prioriteta

#+BEGIN_SRC smalltalk
0@0 extent: 100@100 bottomRight
> Message not understood
> 100 does not understand bottomRight
#+END_SRC

Moramo koristiti zagrade:

#+BEGIN_SRC smalltalk
(0@0 extent: 100@100) bottomRight
> (aPoint extent: anotherPoint) bottomRight
> aRectangle bottomRight
> 100@100
#+END_SRC

** Cena jednostavnosti/uniformnosti

Samo poruke:

- =+=
  - je poruka (nije operacija), ne postoji specijalno definisani prioritet
  - možemo je redefinisati za različite domene
- Jednostavnost
- Ograničenje: nemamo definisan matematički prioritet operacija

** Nema prioriteta aritmetičkih operacija

#+BEGIN_SRC smalltalk
3 + 2 * 10
> 5 * 10
> 50
#+END_SRC

Moramo pisati sa zagradama:

#+BEGIN_SRC smalltalk
3 + (2 * 10)
> 3 + 20
> 23
#+END_SRC

** Nema prioriteta aritmetičkih operacija

#+BEGIN_SRC smalltalk
1/3 + 2/3
> 7/3 /3
> 7/9
#+END_SRC

Moramo pisati:

#+BEGIN_SRC smalltalk
(1/3) + (2/3)
>1
#+END_SRC

** Sekvenca izraza

=.= je separator:

#+BEGIN_SRC smalltalk
expression1.
expression2.
expression3
#+END_SRC

Primer:

#+BEGIN_SRC smalltalk
Transcript cr.
Transcript show: 1.
Transcript show: 2
#+END_SRC

** Sekvenca izraza

- =.= je separator a ne terminacija.
- Nema potrebe da se stavlja na kraju niza izraza.
- Ne stavlja se posle deklaracije privremenih promenjivih.

#+BEGIN_SRC smalltalk
| macNode pcNode |
macNode := Workstation withName: #mac.
macNode sendPacket: 'Hello World'
#+END_SRC

** Slanje više poruka istom objektu - kaskada (=;=)

#+BEGIN_SRC smalltalk
|c|
c := OrderedCollection new.
c add: 1.
c add: 2
#+END_SRC

Ekvivalentno je sa:

#+BEGIN_SRC smalltalk
OrderedCollection new
   add: 1;
   add: 2
#+END_SRC

- =add: 2= se šalje istom prijemniku poruke =add: 1= a to je objekat vraćen
  porukom =new=.

* Blokovi
** Blokovi izgledaju kao funkcije


fct(x) = x*x + 3

#+BEGIN_SRC smalltalk
fct := [ :x | x * x + 3 ]
#+END_SRC

fct(2)

#+BEGIN_SRC smalltalk
fct value: 2
#+END_SRC

** Blokovi

- Anonimne metode

#+BEGIN_SRC smalltalk
[ :each | Transcript show: each abs printString; cr ]
#+END_SRC

- Leksička "zatvorenja" (/closures/)
- Takođe su objekti:
  - Mogu se proslediti kao argumenti poruka
  - Mogu se dodeliti varijablama
  - Mogu biti povratne vrednosti metoda
  
** Upotreba blokova

#+BEGIN_SRC smalltalk
#(1 2 -4 -86) do: [ :each | Transcript show: each abs printString; cr ]
> 1
> 2
> 4
> 86
#+END_SRC

- Pišu se unutar =[]=
- Mogu imati parametre - navode se kao simboli pre =|= (=:each=)
- U ovom primeru blok se evaluira za svaki element niza. =:each= dobija redom
  vrednosti niza.
- =value:= poruka se koristi za evaluaciju bloka.

** Definicija bloka ne izvršava kod

#+BEGIN_SRC smalltalk
(1/0)
-> Greška
#+END_SRC

Ali nema greške pri definiciji bloka:
- Definicija bloka ne izvršava kod
- Definicija bloka "zamrzava" izračunavanje definisano telom bloka.

#+BEGIN_SRC smalltalk
[1/0]
> [1/0]

[1/0].
1 + 2
> 3
#+END_SRC

** Izvršavanje blokova

Obavlja se eksplicitno slanjem poruke =value=.

#+BEGIN_SRC smalltalk
[2 + 6] value
> 8

[1/0] value
> Error
#+END_SRC

** Blok sa jednim argumentom

Blokovi mogu imati argumente (kao i metode):

#+BEGIN_SRC smalltalk
[ :x | x + 2 ]
#+END_SRC

- =:x= predstavlja argument bloka
- =x + 2= je telo bloka

#+BEGIN_SRC smalltalk
[ :x | x + 2 ] value: 5
> 7
#+END_SRC

- Poruka =value:= izvršava blok sa parametrom =5=.
  - =x= dobija vrednost =5= za vreme izvršavanja bloka.
  
** Vrednost evaluacije bloka

Evaluacija bloka vraća vrednost poslednjeg izraza u bloku:

#+BEGIN_SRC smalltalk
[:x|
 x + 33.
 x + 2] value: 5
> 7
#+END_SRC

** Blokovi se mogu sačuvati

- Blok se može sačuvati kao vrednost varijable
- Blok se može evaluirati više puta

#+BEGIN_SRC smalltalk
| add2 |
add2 := [ :x | x + 2 ].
add2 value: 5.
>7

add2 value: 33
> 35
#+END_SRC

** Blokovi mogu imati više argumenata

Primer:

#+BEGIN_SRC smalltalk
[ :x :y | x + y ]
#+END_SRC

=:x :y= su argumenti bloka.

Kako se izvršava blok sa dva argumenta?

#+BEGIN_SRC smalltalk
[ :x :y | x + y ] ??? 5 7
> 12
#+END_SRC

#+ATTR_REVEAL: :frag (t)
#+BEGIN_SRC smalltalk
[ :x :y | x + y ] value: 5 value: 7
> 12
#+END_SRC

#+ATTR_REVEAL: :frag (t)
- =value:value:= je poruka sa dva argumenta koja se šalje bloku sa parametrima
  =5= i =7=
  
** Blokovi sa privremenim varijablama

Blokovi mogu definisati lokalne privremene varijable (kao i metode):

#+BEGIN_SRC smalltalk
Collection>>affect: anObject when: aBoolean
  self do: [ :index | | args |
            args := ....
            aBoolean
            ifTrue: [ anObject do: args ]
            ifFalse: [ anObject doDifferently: args ] ].

#+END_SRC

- =| args |= definiše privremenu varijablu =args=
- =args= postoji samo za vreme izvršavanja bloka

** Povratak iz bloka izaziva povratak iz metode

Kada se =^= izvrši unutar bloka dolazi do povratka iz metode u kojoj je blok
definisan:

#+BEGIN_SRC smalltalk
Integer>>factorial
  "Answer the factorial of the receiver."

  self = 0 ifTrue: [ ^ 1 ].
  self > 0 ifTrue: [ ^ self * (self − 1) factorial ].
  self error: 'Not valid for negative integers'
#+END_SRC

#+BEGIN_SRC smalltalk
0 factorial
>1

42 factorial
>1405006117752879898543142606244511569936384000000000
#+END_SRC

** Dizajn saveti za upotrebu blokova

- Koristi blokove sa najviše 2 ili 3 parametra
- Definisati klasu umesto bloka za više parametara

* Petlje i iteracije 
** Petlje su takođe implementirane kao poruke

#+BEGIN_SRC smalltalk
1 to: 4 do: [ :i | Transcript << i ]
> 1
> 2
> 3
> 4
#+END_SRC

- =to:do:= je poruka poslata broju (instanci =Integer= klase)

** Petlje su takođe implementirane kao poruke

- Mnoge druge vrste petlji: =timesRepeat:=, =to:by:do:=, =whileTrue:=,
  =whileFalse:=...

#+BEGIN_SRC smalltalk
4 timesRepeat: [self doSomething ]

0 to: 100 by: 3 do: [ :i | ... ]
#+END_SRC

- Možete lako napraviti novu vrstu petlje koja se neće razlikovati od sistemske.

** =whileTrue:=

#+BEGIN_SRC smalltalk
[ ... ] whileTrue: [ ... ]
#+END_SRC

Izvršava argument dok god je vrednost prijemnika =true=

#+BEGIN_SRC smalltalk
Color >> atLeastAsLuminentAs: aFloat
  | revisedColor |
  revisedColor := self.
  [ revisedColor luminance < aFloat ]
    whileTrue: [ revisedColor := revisedColor slightlyLighter ].
  ^ revisedColor
#+END_SRC

** =whileTrue=

Izvršava blok prijemnik sve dok je vrednost =true=:

#+BEGIN_SRC smalltalk
[ ... ] whileTrue

#+END_SRC

Analogno, postoje i =whileFalse= i =whileFalse:=

** Iteracije

Implementirane kao poruke.

Pitamo kolekciju da uradi iteraciju svojih elemenata:

#+BEGIN_SRC smalltalk
#(1 2 -4 -86) do: [ :each | Transcript show: each abs printString; cr ]
> 1
> 2
> 4
> 86
#+END_SRC

** Osnovne iteracije definisane nad kolekcijama

- =do:= - iteracija
- =collect:= - iteracija i mapiranje elemenata
- =select:= - selekcija elemenata na osnovu predikata
- =reject:= - eliminacija elemenata na osnovu predikata
- =detect:= - vraća prvi koji zadovoljava uslov
- =detect:ifNone:= - vraća prvi koji zadovoljava uslov ili podrazumevanu
  vrednost ukoliko takvog nema u kolekciji
- =includes:= - test da li elemenat pripada kolekciji
- ... mnogi drugi

#+BEGIN_SRC smalltalk
#(2 3 7) collect: [ :each | each raisedTo: 2 ]
> #(4 9 49)

#(2 9 7) detect: [ :i | (i \\ 3) = 0 ]
> 9
#+END_SRC

** Interesantni primeri

#+BEGIN_SRC smalltalk
3 timesRepeat: [ Transcript show: 'Hello' ; cr ].

Date today + 12 days.

Point linesOfCode.

Smalltalk allClasses size.

Smalltalk allClasses inject: 0 into: [ :sum :each | sum + each linesOfCode ].

VGTigerDemo runDemo.

SystemNavigation new browseAllSelect:
       [:m| m primitive isZero and: [m pragmas notEmpty]].
#+END_SRC

* Bulovi izrazi i uslovi
** Bulovi izrazi

- =true= je jedinstvena instanca klase =True=
- =false= je jedinstvena instanca klase =False=
- Klase =True= i =False= nasleđuju klasu =Boolean=

U Pharo Bulovi izrazi nisu ništa specijalno:
- =& | not=
- =or:= =and:= - lazy
- =xor:=
- =ifTrue:ifFalse:=
- =ifFalse:ifTrue:=
- ...

** /Eager/ i /lazy/ evaluacija izraza

#+BEGIN_SRC smalltalk
false & (1 error: 'crazy')
−> an error
#+END_SRC

Argument =(1 error: 'crazy')= se evaluira jer ova operacija ne koristi "lenju
evaluaciju" (/lazy/).

#+BEGIN_SRC smalltalk
false and: [ 1 error: 'crazy' ]
−> false "no error!"
#+END_SRC

Argument =[ 1 error: 'crazy' ]= se ne evaluira jer nije neophodno za određivanje
vrednosti izraza - koristi se "lenja evaluacija".

** Uslovi

U Pharo uslovi su poruke koje se šalju Bulovim vrednostima i blokovima.

** =ifTrue:ifFalse= je poruka

#+BEGIN_SRC smalltalk
Weather isRaining
  ifTrue: [ self takeMyUmbrella ]
  ifFalse: [ self takeMySunglasses ]
#+END_SRC

- Konceptualno =ifTrue:ifFalse= je poruka koja se šalje objektu koji ima Bulovu
  vrednost (ili je =true= ili je =false=).
- Optimizovano od strane kompajlera.

** =ifTrue= i =ifTrue:ifFalse:=

=ifTrue: []= i =ifTrue: [] ifFalse: []= su različite poruke.

#+BEGIN_SRC smalltalk
LogicalFont>>forceItalicOrOblique
  self slantValue = 0
  ifTrue: [ slantValue := 1 ]
#+END_SRC

Analogno, =ifFalse:[]= i =ifFalse: [] ifTrue: []= su različite poruke.

** Uslovi: =ifEmpty= i =ifNotEmpty:=

Implementirano za kolekcije.

#+BEGIN_SRC smalltalk
myProtocol
  ifEmpty: [ 'As yet unclassified' ]
> 'As yet unclassified' ili myProtocol

Implementacija:
Collection>>ifEmpty: aBlock
	^ self isEmpty 
		ifTrue: [ aBlock value ]
		ifFalse: [ self ]
#+END_SRC

#+BEGIN_SRC smalltalk
self listItems
  ifNotEmpty: [ :aList | aList at: index ]
> element liste na indeksu "index" ili sama lista ukoliko je prazna

Implementacija:
Collection>>ifNotEmpty: aBlock
    ^self isEmpty
          ifTrue: [self]
          ifFalse: [aBlock cull: self] 
#+END_SRC

* Klase i metode
** System Browser
   
[[./slike/browser.png]]

** Kreiranje klase
   
[[./slike/point_class.png]]

** Kreiranje klase

Slanje poruke nadklasi

#+BEGIN_SRC smalltalk
Object subclass: #Point
  instanceVariableNames: 'x y'
  classVariableNames: ''
  package: 'Kernel-BasicObjects'
#+END_SRC

** Definicija metoda

- Metode su javne (/public/)
- Metode su virtualne (tj. pronalaze se u vreme izvršavanja)
- Podrazumevano vraćaju =self=

#+BEGIN_SRC smalltalk
messageSelectorAndArgumentNames
  "comment stating purpose of message"
  
  | temporary variable names |
  statements
#+END_SRC

** Primer definicije metode
   
[[./slike/method_definition.png]]

** Metoda podrazumevano vraća =self=

#+BEGIN_SRC smalltalk
Game >> initializePlayers
  self players
  at: 'tileAction'
  put: ( MITileAction director: self )
#+END_SRC

je ekvivalentno sa:

#+BEGIN_SRC smalltalk
Game >> initializePlayers
  self players
  at: 'tileAction'
  put: ( MITileAction director: self ).
  ^ self "<−− optional"
#+END_SRC

** Metode klase

#+attr_html: :style height: 400px;
[[./slike/class_methods.png]]

- Dugme =Class= služi za pregled i definiciju metoda klase.
- Metode na nivou klase. Odgovor na poruke koje se šalju klasi.

#+BEGIN_SRC smalltalk
Point class >> x: xInteger y: yInteger
  "Answer an instance of me with coordinates xInteger and yInteger."

  ^ self basicNew setX: xInteger setY: yInteger
#+END_SRC
* yourself
** Problem

Dodajemo 2 u skup:

#+BEGIN_SRC smalltalk
Set new add: 2
>2
#+END_SRC

Rezultat izraza je 2 a ne skup!

** Zašto?
   
#+BEGIN_SRC smalltalk
Set>>add: newObject
  "Include newObject as one of the receiver's elements, but
  only if not already present. Answer newObject."
  [...]
  ^ newObject
#+END_SRC

- Metod =add:= vraća argument a ne objekat

#+BEGIN_SRC smalltalk
Set new add: 2
>2
#+END_SRC

** Moguće rešenje
   
#+BEGIN_SRC smalltalk
|s|
s := Set new.
s add: 2.
s
#+END_SRC

** Kraće rešenje - =yourself=

#+BEGIN_SRC smalltalk
Object >> yourself
^ self
#+END_SRC

#+BEGIN_SRC smalltalk
Set new
  add: 2;
  yourself
> aSet
#+END_SRC

- Poruke =add:= i =yourself= se šalju skupu
- kaskada =;= vraća objekat koji vraća poruka =yourself= - u našem slučaju skup.

** Česta greška

#+BEGIN_SRC smalltalk
Counter class >> withValue: anInteger
  self new
  value: anInteger;
  yourself
#+END_SRC

- =Counter withValue: 10= vraća =Counter= klasu umesto njenu instancu.

** Zašto?

#+BEGIN_SRC smalltalk
Counter class >> withValue: anInteger
  self new
  value: anInteger;
  yourself
#+END_SRC

je ekvivalentno sa:

#+BEGIN_SRC smalltalk
Counter class >> withValue: anInteger
  self new
  value: anInteger;
  yourself.
  ^self
#+END_SRC

Gde je =self= prijemnik poruke =withValue:= tj. klasa =Counter=.

** Rešenje

#+BEGIN_SRC smalltalk
Counter class >> withValue: anInteger
  ^self new
  value: anInteger;
  yourself
#+END_SRC

* Nasleđivanje i pretraga metoda (/Method Lookup/)
** Osnove
   
#+REVEAL_HTML: <div class="column" style="float:left; width: 70%">
Podklasa:
- Može da doda stanje i ponašanje
- Može da koristi stanje i ponašanje nadklase 
- Može da izvrši specijalizaciju i redefiniciju ponašanja nadklase
#+REVEAL_HTML: </div>

#+REVEAL_HTML: <div class="column" style="float:right; width: 30%">
[[./slike/inheritance.png]]
#+REVEAL_HTML: </div>

** Koren hijerarhije nasleđivanja

#+REVEAL_HTML: <div class="column" style="float:left; width: 70%">
- Možemo smatrati da je klasa =Object= korenska klasa svake klase.
- Postoji i klasa =ProtoObject= ali je njena upotreba specijalna pa je nećemo
  razmatrati.
#+REVEAL_HTML: </div>

#+REVEAL_HTML: <div class="column" style="float:right; width: 30%">
[[./slike/hierarchy.png]]
#+REVEAL_HTML: </div>

** Osnove nasleđivanja

Nasleđivanje je:
- Statičko za stanje (u vreme definisanja klase).
- Dinamičko za ponašanje (u vreme izvršavanja).

** Nasleđivanje varijabli instanci klasa

#+REVEAL_HTML: <div class="column" style="float:left; width: 70%">
- Dešava se za vreme definicije klase.
- Izračunava se na osnovu:
  - Varijabli posmatrane klase.
  - Varijabli svih nadklasa.
#+REVEAL_HTML: </div>

#+REVEAL_HTML: <div class="column" style="float:right; width: 30%">
[[./slike/inheritance.png]]
#+REVEAL_HTML: </div>

** Nasleđivanje ponašanja
   
#+REVEAL_HTML: <div class="column" style="float:left; width: 70%">
- Dešava se u vreme izvršavanja
- Metoda se traži:
  - Počevši od klase objekta prijemnika
  - Zatim u svim nadklasama uz lanac nasleđivanja.
#+REVEAL_HTML: </div>

#+REVEAL_HTML: <div class="column" style="float:right; width: 30%">
[[./slike/method_lookup.png]]
#+REVEAL_HTML: </div>

** Slanje i obrada poruka

#+REVEAL_HTML: <div class="column" style="float:left; width: 50%">
Obrada poruke se obavlja u dva koraka:
1. Pretraga odgovarajuće metode.
2. Izvršavanje metode na objektu prijemniku.
#+REVEAL_HTML: </div>

#+REVEAL_HTML: <div class="column" style="float:right; width: 50%">
[[./slike/message_sending.png]]
#+REVEAL_HTML: </div>

** Semantika =self= ključne reči

- =self= ključna reč se koristi u implementaciji metoda i *uvek* predstavlja
  objekat prijemnik.

#+attr_html: :style height: 400px;
[[./slike/self_example.png]]

- Šta je rezultat izraza =A new foo= a šta izraza =B new foo=?
- Šta je rezultat izraza =A new bar= a šta izraza =B new bar=?

** Semantika =super= ključne reči

#+attr_html: :style height: 400px;
[[./slike/super_example.png]]

- =super= predstavlja objekat prijemnik ali pretraga poruka započinje u nadklasi
  klase u kojoj se =super= nalazi.
- Šta su rezultati izraza =A new bar=, =B new bar= i =C new bar=?

** =self= se određuje dinamički

#+REVEAL_HTML: <div class="column" style="float:left; width: 50%">
#+attr_html: :style height: 400px;
[[./slike/self_example.png]]
#+REVEAL_HTML: </div>

#+REVEAL_HTML: <div class="column" style="float:right; width: 50%">
U metodi =A>>bar= kod =^self foo= ne znamo do vremena izvršavanja na koji =foo=
se poziv odnosi. To zavisi od klase konkretnog objekta prijemnika.
#+REVEAL_HTML: </div>

** =super= se određuje statički

#+REVEAL_HTML: <div class="column" style="float:left; width: 50%">
[[./slike/super_static.png]]
#+REVEAL_HTML: </div>

#+REVEAL_HTML: <div class="column" style="float:right; width: 50%">
- U vreme kompajliranja znamo da metoda =B>>foo= referencira =A>>foo= putem =super=.
- Uvek počinjemo pretragu u nadklasi klase koja sadrži metodu koja koristi =super=.
#+REVEAL_HTML: </div>

** Poruke koje nemaju odgovarajuću metodu

- Ukoliko metoda nije pronađena standardnim mehanizmom pretrage, prijemniku se
  šalje poruka =doesNotUnderstand=
- Podrazumevana implementacija u =Object= klasi signalizira izuzetak
  =MessageNotUndertood=.
 

#+attr_html: :style height: 400px;
[[./slike/doesNotUnderstand.png]]

* Implementacija =Boolean= tipa
** Implementacija Boolean tipa

U Pharo Boolean tip ima odličan dizajn:

- =&, |, not= - /eager/
- =or:, and:= - /lazy/
- =ifTrue:, ifTrue:ifFalse, ...=

** Za razmišljanje

U svetu gde imate samo dve vrednosti: =true= i =false= i razmenu poruka

- kako implementirati =not=?
- kako implementirati =or=?

** =not=

#+BEGIN_SRC smalltalk
false not
> true
#+END_SRC

#+BEGIN_SRC smalltalk
true not
> false
#+END_SRC

** Bez upotrebe uslova

Rešenje ne koristi uslove.

Uslovi bi svakako morali da budu bazirani na Bulovom tipu.

** Rešenje koristi tri klase

- =Boolean= (apstraktna), =True= i =False=
- =true= je singlton instanca klase =True=
- =false= je singlton instanca klase =False=

#+attr_html: :style height: 500px;
[[./slike/boolean.png]]

** Kako iskazujemo izbor u OOP?

U OOP, izbor iskazujemo:

- Definisanjem klasa sa kompatibilnim metodama
- Slanjem poruke instanci takve klase

Primer:

#+BEGIN_SRC smalltalk
x open
#+END_SRC

- =x= može biti fajl, prozor, alat...
- Metod se selektuje u zavisnosti od klase objekta =x=
- U Python-u poznato kao /Duck Typing/

** Implementacija =not= operacije

#+BEGIN_SRC smalltalk
False >> not
  "Negation −− answer true since the receiver is false."
  ^ true
#+END_SRC

#+BEGIN_SRC smalltalk
True >> not
  "Negation −− answer false since the receiver is true."
  ^ false
#+END_SRC

** Hijerarhija implementacije 

[[./slike/boolean_not_hierarchy.png]]

** Pretraga poruke (/message lookup/) je izbor prave metode

[[./slike/boolean_not_lookup.png]]

** Implementacija =Boolean= klase

- =Boolean= je abstraktna klasa
- Podklase su =True= i =False= koje implementiraju:
  - logičke operacije =&= i =not=
  - kontrolne strukture =and:=, =or:=, =ifTrue:=, =ifFalse:=, =ifTrue:ifFalse:=,
    =ifFalse:ifTrue:=
  
#+BEGIN_SRC smalltalk
Boolean>>not
  "Abstract method. Negation: Answer true if the receiver is
   false, answer false if the receiver is true."

  self subclassResponsibility
#+END_SRC 

** Ponašanje =Or= operacije

#+BEGIN_SRC
true | true −> true
true | false −> true
true | anything −> true
#+END_SRC

#+BEGIN_SRC
false | true −> true
false | false −> false
false | anything −> anything
#+END_SRC

** Implementacija =Or= operacije u =Boolean= klasi

#+BEGIN_SRC smalltalk
Boolean >> | aBoolean
  "Abstract method. Evaluating Or: Evaluate the argument.
   Answer true if either the receiver or the argument is true."

  self subclassResponsibility
#+END_SRC

** Implementacija =Or= operacije u klasi =False=

#+BEGIN_SRC
false | true −> true
false | false −> false
false | anything −> anything
#+END_SRC

#+BEGIN_SRC smalltalk
False >> | aBoolean
  "Evaluating Or −− answer with the argument, aBoolean."
  ^aBoolean
#+END_SRC

** Implementacija =Or= operacije u klasi =True=

#+BEGIN_SRC
true | true −> true
true | false −> true
true | anything −> true
#+END_SRC

#+BEGIN_SRC smalltalk
True >> | aBoolean
  "Evaluating Or −− answer true since the receiver is true."
  ^true
#+END_SRC

A pošto je prijemnik =true= možemo uraditi sledeće:

#+BEGIN_SRC smalltalk
True >> | aBoolean
  "Evaluating Or −− answer true since the receiver is true."
  ^self
#+END_SRC

* Reference

- [[http://mooc.pharo.org][Pharo MOOC]]
- [[http://rmod-pharo-mooc.lille.inria.fr/MOOC/WebPortal/co/pharo.html][Video lekcije]]
- [[http://books.pharo.org][Pharo knjige]]
- [[https://github.com/pharo-open-documentation/awesome-pharo][A community-driven collection of awesome Pharo libraries, tools, frameworks and software]] 
- [[http://amber-lang.net/][Client-side smalltalk - Amber]]


